@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using Truckero.Core.DTOs.Media

<div class="space-y-2 w-full">
    <label class="block text-sm font-medium text-gray-700">@Label</label>

    @if (PreviewImageUrl == null)
    {
        <button type="button"
                @onclick="TriggerUpload"
                class="w-full flex flex-col items-center justify-center aspect-[1.2/1] border-2 border-dashed border-gray-300 p-4 rounded-lg hover:border-orange-500 hover:text-orange-500 text-2xl">
            <i class="fa-solid fa-camera text-3xl"></i>
            <span class="text-base mt-2">@Placeholder</span>
        </button>
    }
    else
    {
        <div class="relative group w-full">
            <div class="aspect-[1.2/1] bg-gray-100 rounded-lg overflow-hidden w-full">
                <img class="w-full h-full object-cover" src="@PreviewImageUrl" alt="uploaded image preview" />
                <div class="absolute inset-0 bg-black bg-opacity-40 group-hover:bg-opacity-50 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity">
                    <button type="button" @onclick="TriggerUpload" class="text-white">
                        <i class="fa-solid fa-camera-rotate text-3xl"></i>
                    </button>
                </div>
            </div>
            <span class="block text-xs text-gray-500 mt-1 text-center">@Label</span>
        </div>
    }
</div>

@code {
    [Parameter] public string Label { get; set; } = "";
    [Parameter] public string Placeholder { get; set; } = "Upload Photo";
    [Parameter] public string FileType { get; set; } = "";
    [Parameter] public string? ImageUrl { get; set; } // Not required for preview (used only as initial)
    [Parameter] public Guid UserId { get; set; }
    [Parameter] public EventCallback<string> OnUpload { get; set; }
    [Parameter] public EventCallback OnUploadFailed { get; set; }

    [Inject] public IMediaPicker MediaPicker { get; set; } = default!;
    [Inject] public IMediaService MediaService { get; set; } = default!;

    private string? PreviewImageUrl { get; set; }

    private async Task TriggerUpload()
    {
        var file = await MediaPicker.CapturePhotoAsync();
        if (file == null || UserId == Guid.Empty)
        {
            await OnUploadFailed.InvokeAsync();
            return;
        }

        using var stream = await file.OpenReadAsync();
        var result = await MediaService.UploadImageAsync(new ImageUploadRequest
        {
            FileStream = stream,
            FileName = file.FileName,
            FileType = FileType,
            AllowedExtensions = new[] { ".jpg", ".jpeg", ".png" },
            MaxSizeBytes = 5 * 1024 * 1024,
            UserId = UserId
        });

        if (result.Success && result.Url != null)
        {
            // Convert to base64 if local file path
            if (result.Url.StartsWith("file://"))
            {
                stream.Position = 0;
                using var ms = new MemoryStream();
                await stream.CopyToAsync(ms);
                var bytes = ms.ToArray();
                var base64 = Convert.ToBase64String(bytes);
                var ext = Path.GetExtension(file.FileName)?.ToLowerInvariant();
                var contentType = ext switch
                {
                    ".jpg" or ".jpeg" => "image/jpeg",
                    ".png" => "image/png",
                    _ => "image/jpeg"
                };
                PreviewImageUrl = $"data:{contentType};base64,{base64}";
            }
            else
            {
                PreviewImageUrl = result.Url;
            }

            await OnUpload.InvokeAsync(result.Url);
        }
        else
        {
            await OnUploadFailed.InvokeAsync();
        }
    }
}
