@page "/"
@using Truckero.Core.DTOs.Auth
@using Truckero.Core.Enums
@using Truckero.Core.Interfaces
@using TruckeroApp.Interfaces
@using Truckero.Core.Interfaces.Services
@using TruckeroApp.DebugTools
@using Truckero.Core.Constants

@inject NavigationManager NavManager
@inject ITokenStorageService TokenStorage
@inject IAuthService AuthService
@inject IAuthSessionContext Session
@inject IAuthTokenRepository TokenRepository

<h3>Loading...</h3>

@code {
    protected override async Task OnInitializedAsync()
    {
#if DEBUG
        // await StartupTestPaths.TokenWithExceptionOnRefresh(TokenStorage);
        // await StartupTestPaths.TokenWithNoRefreshToken(TokenStorage);
        // await StartupTestPaths.TokenWithBadRefreshToken(TokenStorage);
        // await StartupTestPaths.InvalidToken(TokenStorage);
        // await StartupTestPaths.NoToken(TokenStorage);
        // await StartupTestPaths.ValidTokenCustomer(TokenStorage, AuthService, TokenRepository);
        // await StartupTestPaths.ValidTokenStoreClerk(TokenStorage, AuthService, TokenRepository);
        // await StartupTestPaths.ValidTokenDriver(TokenStorage, AuthService, TokenRepository);
#endif

        var token = await TokenStorage.GetAccessTokenAsync();

        if (string.IsNullOrWhiteSpace(token))
        {
            NavManager.NavigateTo(AppRoutes.RoleSwitcher, forceLoad: true);
            return;
        }

        var validationResult = await TokenRepository.ValidateAccessTokenAsync(token);

        if (!validationResult.Valid)
        {
            if (validationResult.Reason == ExceptionCodes.EmailNotVerified)
            {
                NavManager.NavigateTo(AppRoutes.EmailNotVerified, forceLoad: true);
                return;
            }

            var refreshToken = await TokenStorage.GetRefreshTokenAsync();

            if (string.IsNullOrWhiteSpace(refreshToken))
            {
                NavManager.NavigateTo($"{AppRoutes.LoginExpired}?reason={ExceptionCodes.NoRefreshToken}", forceLoad: true);
                return;
            }

            try
            {
                var refreshResult = await AuthService.RefreshAccessTokenAsync(new RefreshTokenRequest
                {
                    RefreshToken = refreshToken
                });

                if (!string.IsNullOrWhiteSpace(refreshResult.AccessToken))
                {
                    await TokenStorage.SaveAccessTokenAsync(refreshResult.AccessToken);
                    await TokenStorage.SaveRefreshTokenAsync(refreshResult.RefreshToken);
                    token = refreshResult.AccessToken;

                    var role = await AuthService.GetActiveRoleAsync();
                    var roles = await AuthService.GetAllRolesAsync();
                    Session.Set(token, roles, role);
                }
                else
                {
                    var refreshedUser = await AuthService.GetCurrentUserAsync();
                    if (refreshedUser == null)
                    {
                        var role = await TokenStorage.GetValueAsync("role");
                        NavManager.NavigateTo($"{AppRoutes.AccountNotAvailable}?role={role}", forceLoad: true);
                        return;
                    }
                    else if (!refreshedUser.EmailVerified)
                    {
                        NavManager.NavigateTo(AppRoutes.EmailNotVerified, forceLoad: true);
                        return;
                    }
                    else
                    {
                        NavManager.NavigateTo($"{AppRoutes.LoginExpired}?reason={ExceptionCodes.RefreshFailed}", forceLoad: true);
                        return;
                    }
                }
            }
            catch
            {
                var exceptionUser = await AuthService.GetCurrentUserAsync();
                if (exceptionUser == null)
                {
                    // before giving up -- let's try and locate the user via the GetUserBy
                    var role = await TokenStorage.GetValueAsync("role");
                    NavManager.NavigateTo($"{AppRoutes.AccountNotAvailable}?role={role}", forceLoad: true);
                    return;
                }
                else if (!exceptionUser.EmailVerified)
                {
                    NavManager.NavigateTo(AppRoutes.EmailNotVerified, forceLoad: true);
                    return;
                }
                else
                {
                    NavManager.NavigateTo($"{AppRoutes.LoginExpired}?reason={ExceptionCodes.RefreshError}", forceLoad: true);
                    return;
                }
            }
        }

        var user = await AuthService.GetCurrentUserAsync();
        if (user == null)
        {
            var role = await TokenStorage.GetValueAsync("role");
            NavManager.NavigateTo($"{AppRoutes.AccountNotAvailable}?role={role}", forceLoad: true);
            return;
        }
        if (!user.EmailVerified)
        {
            NavManager.NavigateTo(AppRoutes.EmailNotVerified, forceLoad: true);
            return;
        }

        try
        {
            var role = await AuthService.GetActiveRoleAsync();
            var roles = await AuthService.GetAllRolesAsync();

            Session.Set(token, roles, role);

            var redirect = role switch
            {
                "Customer" => AppRoutes.RequestFreight,
                "Driver" => AppRoutes.PickupQueue,
                "StoreClerk" => AppRoutes.RegisterStoreClerk,
                _ => AppRoutes.LoginExpired
            };

            NavManager.NavigateTo(redirect, forceLoad: true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"⚠️ Session setup failed: {ex.Message}");
            NavManager.NavigateTo(AppRoutes.Login, forceLoad: true);
        }
    }
}
