@page "/registerdriver"
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@using Truckero.Core.DTOs.Auth
@using Truckero.Core.DataAnnotations
@using Truckero.Core.Exceptions
@using TruckeroApp.ServiceClients
@using Truckero.Core.Interfaces.Services
@using System.Net
@using TruckeroApp.Components.BottomSheets
@using Microsoft.AspNetCore.Components.Routing
@using Truckero.Core.DTOs.Common
@using TruckeroApp.Interfaces
@using TruckeroApp.DebugTools
@using System.Net.Http
@using System.Text.Json

@inject IOnboardingService OnboardingService
@inject NavigationManager NavigationManager
@inject ITokenStorageService TokenStorage

<CenterWrapper>
    <div class="h-full text-base-content">
    <div id="app" class="min-h-screen bg-gray-50">
        <div id="registration-screen" class="p-6 min-h-screen">
            <div id="registration-header" class="flex items-center mb-8">
                <button class="text-gray-600" @onclick="NavigateBack">
                    <i class="fa-solid fa-arrow-left text-xl"></i>
                </button>
                <div class="text-center flex-1 mr-8">
                    <h2 class="text-xl font-semibold">Driver Registration</h2>
                </div>
            </div>

            <div id="registration-progress" class="mb-6">
                <div class="flex items-center justify-between mb-2">
                    <span class="text-sm text-gray-600">Step 2 of 3</span>
                    <span class="text-sm text-orange-500">Driver Details</span>
                </div>
                <div class="w-full bg-gray-200 rounded-full h-2">
                    <div class="bg-orange-500 h-2 rounded-full w-2/3"></div>
                </div>
            </div>

            <div id="role-indicator" class="bg-orange-100 p-3 rounded-lg mb-6 flex items-center">
                <i class="fa-solid fa-truck text-orange-500 mr-3"></i>
                <span class="text-sm text-orange-700">Registering as: <strong>DRIVER</strong></span>
            </div>

            <EditForm EditContext="_editContext" OnValidSubmit="SubmitAsync" OnInvalidSubmit="HandleInvalidSubmit" id="registration-form" class="space-y-4">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-red-500 text-sm mb-4" />

                <div id="personal-info-section" class="space-y-4">
                    <div class="space-y-2">
                        <label class="block text-sm font-medium text-gray-700">Full Name</label>
                        <InputText @bind-Value="DriverProfile.FullName" class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-orange-500 focus:border-orange-500" placeholder="Enter your full name" />
                        <ValidationMessage For="@(() => DriverProfile.FullName)" class="text-red-500 text-xs" />
                    </div>

                    <div class="space-y-2">
                        <label class="block text-sm font-medium text-gray-700">User ID</label>
                        <InputText @bind-Value="UserId" class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-orange-500 focus:border-orange-500" placeholder="Choose a unique user ID" />
                        <ValidationMessage For="@(() => UserId)" class="text-red-500 text-xs" />
                    </div>

                    <div class="space-y-2">
                        <label class="block text-sm font-medium text-gray-700">Email Address</label>
                        <InputText @bind-Value="DriverProfile.Email" type="email" class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-orange-500 focus:border-orange-500" placeholder="Enter your email address" />
                        <ValidationMessage For="@(() => DriverProfile.Email)" class="text-red-500 text-xs" />
                    </div>

                    <div class="space-y-2">
                        <label class="block text-sm font-medium text-gray-700">Phone Number</label>
                        <InputText @bind-Value="DriverProfile.PhoneNumber" type="tel" class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-orange-500 focus:border-orange-500" placeholder="Enter your phone number" />
                        <ValidationMessage For="@(() => DriverProfile.PhoneNumber)" class="text-red-500 text-xs" />
                    </div>
                </div>

                <div id="license-section" class="space-y-4 mt-6">
                    <h3 class="text-lg font-medium text-gray-800">Driver's License</h3>

                    @if (IsNameMismatch)
                    {
                        <div id="license-warning" class="bg-red-50 border border-red-200 rounded-lg p-4 flex items-start space-x-3">
                            <i class="fa-solid fa-triangle-exclamation text-red-500 mt-1"></i>
                            <p class="text-sm text-red-600">The name on your driver's license doesn't match your registration name. Please ensure both names match exactly.</p>
                        </div>
                    }

                    <div class="space-y-2">
                        <label class="block text-sm font-medium text-gray-700">License Number</label>
                        <InputText @bind-Value="DriverProfile.LicenseNumber" class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-orange-500 focus:border-orange-500" placeholder="Enter license number" />
                        <ValidationMessage For="@(() => DriverProfile.LicenseNumber)" class="text-red-500 text-xs" />
                    </div>

                    <div class="grid grid-cols-2 gap-4">
                        <div class="space-y-2">
                            <label class="block text-sm font-medium text-gray-700">Front Side</label>
                            <button type="button" @onclick="UploadLicenseFront" class="w-full flex flex-col items-center justify-center space-y-2 border-2 border-dashed border-gray-300 p-4 rounded-lg hover:border-orange-500 hover:text-orange-500">
                                <i class="fa-solid fa-camera text-xl"></i>
                                <span class="text-sm">Front Photo</span>
                            </button>
                        </div>
                        <div class="space-y-2">
                            <label class="block text-sm font-medium text-gray-700">Back Side</label>
                            <button type="button" @onclick="UploadLicenseBack" class="w-full flex flex-col items-center justify-center space-y-2 border-2 border-dashed border-gray-300 p-4 rounded-lg hover:border-orange-500 hover:text-orange-500">
                                <i class="fa-solid fa-camera text-xl"></i>
                                <span class="text-sm">Back Photo</span>
                            </button>
                        </div>
                    </div>

                    @if (LicenseFrontUrl != null || LicenseBackUrl != null)
                    {
                        <div id="license-preview" class="space-y-4">
                            <h4 class="text-sm font-medium text-gray-700">License Photos Preview</h4>
                            <div class="grid grid-cols-2 gap-4">
                                @if (LicenseFrontUrl != null)
                                {
                                    <div class="relative group">
                                        <div class="aspect-[1.6/1] bg-gray-100 rounded-lg overflow-hidden">
                                            <img class="w-full h-full object-cover" src="@LicenseFrontUrl" alt="driver license front side photo preview with good lighting">
                                            <div class="absolute inset-0 bg-black bg-opacity-40 group-hover:bg-opacity-50 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity">
                                                <button type="button" @onclick="UploadLicenseFront" class="text-white">
                                                    <i class="fa-solid fa-camera-rotate text-xl"></i>
                                                </button>
                                            </div>
                                        </div>
                                        <span class="block text-xs text-gray-500 mt-1 text-center">Front Side</span>
                                    </div>
                                }
                                @if (LicenseBackUrl != null)
                                {
                                    <div class="relative group">
                                        <div class="aspect-[1.6/1] bg-gray-100 rounded-lg overflow-hidden">
                                            <img class="w-full h-full object-cover" src="@LicenseBackUrl" alt="driver license back side photo preview with good lighting">
                                            <div class="absolute inset-0 bg-black bg-opacity-40 group-hover:bg-opacity-50 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity">
                                                <button type="button" @onclick="UploadLicenseBack" class="text-white">
                                                    <i class="fa-solid fa-camera-rotate text-xl"></i>
                                                </button>
                                            </div>
                                        </div>
                                        <span class="block text-xs text-gray-500 mt-1 text-center">Back Side</span>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>

                <div id="truck-info-section" class="space-y-4 mt-6">
                    <h3 class="text-lg font-medium text-gray-800">Truck Information</h3>
                    @if (RegisteredTrucks.Any())
                    {
                        <div id="registered-trucks" class="space-y-3">
                            @foreach (var truck in RegisteredTrucks)
                            {
                                <div class="bg-white rounded-lg border border-gray-200 p-4">
                                    <div class="flex items-center justify-between">
                                        <div class="flex items-center space-x-3">
                                            <i class="fa-solid fa-truck-moving text-gray-600"></i>
                                            <div>
                                                <h4 class="font-medium">@truck.LicensePlate</h4>
                                                <p class="text-sm text-gray-500">@truck.Make @truck.Model • @truck.Year</p>
                                            </div>
                                        </div>
                                        <div class="flex items-center space-x-3">
                                            @if (truck.IsVerified)
                                            {
                                                <i class="fa-solid fa-circle-check text-green-500"></i>
                                            }
                                            else
                                            {
                                                <i class="fa-solid fa-circle-xmark text-red-500" title="@truck.VerificationMessage"></i>
                                            }
                                            <button type="button" @onclick="() => EditTruck(truck)" class="text-gray-400 hover:text-gray-600">
                                                <i class="fa-solid fa-pen-to-square"></i>
                                            </button>
                                            <button type="button" @onclick="() => RemoveTruck(truck)" class="text-gray-400 hover:text-red-500">
                                                <i class="fa-solid fa-trash"></i>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    <button type="button" @onclick="AddNewTruck" class="w-full flex items-center justify-center px-4 py-3 bg-orange-50 text-orange-600 rounded-lg border border-orange-200 hover:bg-orange-100">
                        <i class="fa-solid fa-plus mr-2"></i>
                        <span>Add New Truck</span>
                    </button>
                </div>

                <div id="service-area-section" class="space-y-4 mt-6">
                    <h3 class="text-lg font-medium text-gray-800">Service Area</h3>
                    <button type="button" @onclick="SetServiceAreas" class="w-full flex items-center justify-between px-4 py-3 bg-gray-50 rounded-lg border border-gray-300 hover:border-orange-500">
                        <span class="text-gray-600">Set Availability &amp; Service Areas</span>
                        <i class="fa-solid fa-chevron-right text-gray-400"></i>
                    </button>
                </div>

                <div id="password-section" class="space-y-4 mt-6">
                    <div class="space-y-2">
                        <label class="block text-sm font-medium text-gray-700">Password</label>
                        <div class="relative">
                            <InputText @bind-Value="Password" type="@(ShowPassword ? "text" : "password")" class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-orange-500 focus:border-orange-500" placeholder="Create password" />
                            <button type="button" @onclick="TogglePasswordVisibility" class="absolute right-3 top-3 text-gray-400">
                                <i class="fa-regular @(ShowPassword ? "fa-eye-slash" : "fa-eye") text-lg"></i>
                            </button>
                        </div>
                        <p class="text-xs text-gray-500 mt-1">Must be at least 8 characters long</p>
                        <ValidationMessage For="@(() => Password)" class="text-red-500 text-xs" />
                    </div>
                    <div class="space-y-2">
                        <label class="block text-sm font-medium text-gray-700">Confirm Password</label>
                        <div class="relative">
                            <InputText @bind-Value="ConfirmPassword" type="@(ShowConfirmPassword ? "text" : "password")" class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-orange-500 focus:border-orange-500" placeholder="Confirm password" />
                            <button type="button" @onclick="ToggleConfirmPasswordVisibility" class="absolute right-3 top-3 text-gray-400">
                                <i class="fa-regular @(ShowConfirmPassword ? "fa-eye-slash" : "fa-eye") text-lg"></i>
                            </button>
                        </div>
                        <ValidationMessage For="@(() => ConfirmPassword)" class="text-red-500 text-xs" />
                    </div>
                </div>

                <div class="flex items-start space-x-3 mt-6 mb-4">
                    <InputCheckbox @bind-Value="AcceptTerms" id="terms" class="mt-1 h-4 w-4 rounded border-gray-300 text-orange-500 focus:ring-orange-500" />
                    <label for="terms" class="text-sm text-gray-600">
                        I agree to Truckeo's <span class="text-orange-600 cursor-pointer" @onclick="ShowTermsOfService">Terms of Service</span> and <span class="text-orange-600 cursor-pointer" @onclick="ShowPrivacyPolicy">Privacy Policy</span>
                    </label>
                </div>
                @if (FormSubmitted && !AcceptTerms)
                {
                    <div class="text-red-500 text-xs">You must accept the terms and conditions to continue</div>
                }

                <button type="submit" class="@GetContinueButtonClasses()" disabled="@(!IsFormValid || IsLoading)">
                    @if (IsLoading)
                    {
                        <span class="inline-block animate-spin mr-2"><i class="fa-solid fa-circle-notch"></i></span>
                        <span>Processing...</span>
                    }
                    else
                    {
                        <span>Continue</span>
                    }
                </button>

                <div class="relative my-6">
                    <div class="absolute inset-0 flex items-center">
                        <div class="w-full border-t border-gray-300"></div>
                    </div>
                    <div class="relative flex justify-center text-sm">
                        <span class="px-2 bg-gray-50 text-gray-500">Or continue with</span>
                    </div>
                </div>

                <div class="grid grid-cols-2 gap-4">
                    <button type="button" @onclick="SignInWithGoogle" class="flex items-center justify-center px-4 py-3 border border-gray-300 rounded-lg hover:bg-gray-50">
                        <i class="fa-brands fa-google text-xl text-gray-600"></i>
                        <span class="ml-2">Google</span>
                    </button>
                    <button type="button" @onclick="SignInWithFacebook" class="flex items-center justify-center px-4 py-3 border border-gray-300 rounded-lg hover:bg-gray-50">
                        <i class="fa-brands fa-facebook text-xl text-blue-600"></i>
                        <span class="ml-2">Facebook</span>
                    </button>
                </div>

                <p class="text-sm text-center text-gray-600 mt-6">
                    Already have an account? <span class="text-orange-600 font-medium cursor-pointer" @onclick="NavigateToLogin">Log In</span>
                </p>
            </EditForm>

            @if (!String.IsNullOrEmpty(ActiveBottomSheet))
            {
                @switch (ActiveBottomSheet)
                {
                    case "validation_failed":
                        <ValidationFailedBottomSheet ValidationErrors="@ValidationErrors"
                                                     OnDismiss="@(() => ActiveBottomSheet = null)" />
                        break;

                    case "weak_password":
                        <WeakPasswordBottomSheet OnDismiss="@(() => ActiveBottomSheet = null)" />
                        break;

                    case "invalid_phone_format":
                        <PhoneFormatErrorBottomSheet OnDismiss="@(() => ActiveBottomSheet = null)" />
                        break;

                    case "profile_creation_failed":
                        <ProfileCreationErrorBottomSheet OnDismiss="@(() => ActiveBottomSheet = null)" />
                        break;

                    case "progress_save_failed":
                        <ProgressSaveErrorBottomSheet OnDismiss="@(() => ActiveBottomSheet = null)" />
                        break;

                    case "auth_register_failed":
                        <AuthRegisterErrorBottomSheet OnDismiss="@(() => ActiveBottomSheet = null)" />
                        break;

                    case "failure_send_confirmationemail":
                        <EmailResendBottomSheet Email="@DriverProfile.Email"
                                                IsResendingEmail="@IsResendingEmail"
                                                ResendEmailMessage="@ResendEmailMessage"
                                                ResendToOriginalEmail="@ResendToOriginalEmailAsync"
                                                SendToNewEmail="@SendToNewEmailAsync"
                                                OnDismiss="@(() => ActiveBottomSheet = null)" />
                        break;

                    case "generic_error":
                        <GenericErrorBottomSheet Message="@ErrorMessage"
                                                 OnDismiss="@(() => ActiveBottomSheet = null)" />
                        break;
                    case "email_already_exist":
                        <UserExistsBottomSheet Email="@DriverProfile.Email"
                           OnDismiss="@(() => ActiveBottomSheet = null)"
                           OnLogin="@(() => NavigationManager.NavigateTo(AppRoutes.Login, forceLoad: true))" />

                        break;
                    case "email_confirmation":
                        <EmailConfirmationBottomSheet Email="@DriverProfile.Email"
                                                      RegisteredUserId="@RegisteredUserId" />
                        break;
                }
            }
        </div>
    </div>
</div>
</CenterWrapper>

@code {
    private DriverProfileRequest DriverProfile { get; set; } = new DriverProfileRequest();
    private EditContext? _editContext;
    private string? ActiveBottomSheet { get; set; }
    private List<string> ValidationErrors { get; set; } = new();
    private string ErrorMessage { get; set; } = string.Empty;
    private Guid RegisteredUserId { get; set; }
    private string ResendEmailMessage = string.Empty;
    private bool IsResendingEmail = false;

    [Required]
    private string UserId { get; set; } = string.Empty;

    [Required]
    [MinLength(8, ErrorMessage = "Password must be at least 8 characters long")]
    [StrongPassword(ErrorMessage = "Must include upper, lower, digit, and symbol")] // if available
    private string Password { get; set; } = string.Empty;

    [Required]
    [Compare(nameof(Password), ErrorMessage = "Passwords do not match")]
    private string ConfirmPassword { get; set; } = string.Empty;

    private bool AcceptTerms { get; set; } = false;
    private bool FormSubmitted { get; set; } = false;
    private bool IsLoading { get; set; } = false;
    private bool ShowPassword { get; set; } = false;
    private bool ShowConfirmPassword { get; set; } = false;
    private bool IsNameMismatch { get; set; } = false;
    private string? LicenseFrontUrl { get; set; }
    private string? LicenseBackUrl { get; set; }

    private List<TruckInfo> RegisteredTrucks { get; set; } = new List<TruckInfo>
    {
        new TruckInfo
        {
            LicensePlate = "ABC-1234",
            Make = "Ford",
            Model = "F-150",
            Year = "2023",
            IsVerified = true
        },
        new TruckInfo
        {
            LicensePlate = "XYZ-5678",
            Make = "Toyota",
            Model = "Tundra",
            Year = "2024",
            IsVerified = false,
            VerificationMessage = "Registered to another driver"
        }
    };

    private class TruckInfo
    {
        public string LicensePlate { get; set; } = string.Empty;
        public string Make { get; set; } = string.Empty;
        public string Model { get; set; } = string.Empty;
        public string Year { get; set; } = string.Empty;
        public bool IsVerified { get; set; }
        public string VerificationMessage { get; set; } = string.Empty;
    }

    protected override void OnInitialized()
    {
        _editContext = new EditContext(DriverProfile);
        _editContext.OnFieldChanged += (sender, args) => StateHasChanged();
    }

    private async Task SubmitAsync()
    {
        FormSubmitted = true;
        ActiveBottomSheet = null;
        ErrorMessage = string.Empty;

        // Run all field validations
        if (!(_editContext?.Validate() ?? false) || !AcceptTerms)
        {
            ActiveBottomSheet = "validation_failed";
            return;
        }

        IsLoading = true;

        try
        {
            DriverProfile.Password = Password;
            DriverProfile.UserId = UserId;
            DriverProfile.LicenseFrontUrl = LicenseFrontUrl ?? string.Empty;
            DriverProfile.LicenseBackUrl = LicenseBackUrl ?? string.Empty;
            DriverProfile.Trucks = RegisteredTrucks.Select(t => new DriverProfileRequest.TruckDto
            {
                LicensePlate = t.LicensePlate,
                Make = t.Make,
                Model = t.Model,
                Year = t.Year
            }).ToList();

            // Simulated onboarding call - adapt for your actual API contract
            var authTokenResponse = await OnboardingService.CompleteDriverOnboardingAsync(DriverProfile);

            if (authTokenResponse == null)
            {
                Console.WriteLine("❌ AuthTokenResponse is null.");
                ErrorMessage = "Unexpected error: no token received.";
                ActiveBottomSheet = "generic_error";
                return;
            }

            Console.WriteLine($"✅ Token received. Access: {authTokenResponse.AccessToken}, Refresh: {authTokenResponse.RefreshToken}");

            if (string.IsNullOrWhiteSpace(authTokenResponse.AccessToken))
            {
                Console.WriteLine("❌ Access token is missing.");
                ErrorMessage = "Access token was not issued.";
                ActiveBottomSheet = "generic_error";
                return;
            }

            if (string.IsNullOrWhiteSpace(authTokenResponse.RefreshToken))
            {
                Console.WriteLine("⚠️ Refresh token is missing.");
                ErrorMessage = "Refresh token was not issued.";
                ActiveBottomSheet = "generic_error";
                return;
            }

            try
            {
                await TokenStorage.SaveAccessTokenAsync(authTokenResponse.AccessToken);
                await TokenStorage.SaveRefreshTokenAsync(authTokenResponse.RefreshToken);
                Console.WriteLine("💾 Tokens saved successfully.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"❌ Token storage failed: {ex.Message}");
                ErrorMessage = "Failed to store login session.";
                ActiveBottomSheet = "generic_error";
                return;
            }

            // 🎉 Show confirmation
            RegisteredUserId = authTokenResponse.UserId;
            ActiveBottomSheet = "email_confirmation";
        }
        catch (OnboardingClientValidationException ex)
        {
            ValidationErrors = ex.Errors;
            Console.WriteLine($"❌ Validation failed with {ValidationErrors.Count} error(s).");
            ActiveBottomSheet = "validation_failed";
        }
        catch (OnboardingClientException ex)
        {
            ActiveBottomSheet = ex.StepCode;

            // Optionally assign structured error content
            if (ActiveBottomSheet == "generic_error")
                ErrorMessage = ex.Message;
        }
        catch (HttpRequestException ex) when (ex.StatusCode == HttpStatusCode.Conflict)
        {
            Console.WriteLine($"⚠️ Conflict: {ex.Message}");
            ActiveBottomSheet = "user_exists";
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"❌ HTTP Error: {ex.StatusCode}, {ex.Message}");
            ErrorMessage = $"Server error: {ex.Message}";
            ActiveBottomSheet = "generic_error";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Unexpected error: {ex.Message}");
            ErrorMessage = "An unknown error occurred during registration.";
            ActiveBottomSheet = "generic_error";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private void HandleInvalidSubmit(EditContext context)
    {
        ValidationErrors = context
            .GetValidationMessages()
            .Take(5)
            .ToList();

        ActiveBottomSheet = "validation_failed";
    }

    private void NavigateBack() => NavigationManager.NavigateTo("/register");
    private void NavigateToLogin() => NavigationManager.NavigateTo("/login");
    private void TogglePasswordVisibility() => ShowPassword = !ShowPassword;
    private void ToggleConfirmPasswordVisibility() => ShowConfirmPassword = !ShowConfirmPassword;

    private async Task UploadLicenseFront()
    {
        IsLoading = true;
        await Task.Delay(1000);
        LicenseFrontUrl = "https://storage.googleapis.com/uxpilot-auth.appspot.com/e3957fab62-5c352241b3435cd72397.png";
        IsLoading = false;
    }

    private async Task UploadLicenseBack()
    {
        IsLoading = true;
        await Task.Delay(1000);
        LicenseBackUrl = "https://storage.googleapis.com/uxpilot-auth.appspot.com/186d45ce04-753aac84a2d2ecbf2640.png";
        IsLoading = false;
    }

    private void AddNewTruck()
    {
        RegisteredTrucks.Add(new TruckInfo
        {
            LicensePlate = "NEW-TRUCK",
            Make = "New",
            Model = "Truck",
            Year = DateTime.Now.Year.ToString(),
            IsVerified = false,
            VerificationMessage = "Pending verification"
        });
    }

    private void EditTruck(TruckInfo truck) { }
    private void RemoveTruck(TruckInfo truck) => RegisteredTrucks.Remove(truck);
    private void SetServiceAreas() => NavigationManager.NavigateTo("/registerdriver/serviceareas");
    private void ShowTermsOfService() { /* TODO: Show modal or navigate to page */ }
    private void ShowPrivacyPolicy() { /* TODO: Show modal or navigate to page */ }
    private void SignInWithGoogle() { /* TODO: Implement */ }
    private void SignInWithFacebook() { /* TODO: Implement */ }

    private bool IsFormValid =>
        IsTextValid(DriverProfile.FullName) &&
        IsTextValid(DriverProfile.Email) &&
        IsTextValid(DriverProfile.PhoneNumber) &&
        IsTextValid(DriverProfile.LicenseNumber) &&
        IsTextValid(UserId) &&
        IsValidEmail(DriverProfile.Email) &&
        IsValidPassword() &&
        AcceptTerms;

    private bool IsTextValid(string? input) =>
        !string.IsNullOrWhiteSpace(input) && input.Trim().Length >= 4;

    private bool IsValidEmail(string? email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email ?? "");
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }

    private bool IsValidPassword() =>
        !string.IsNullOrWhiteSpace(Password) &&
        Password.Length >= 8 &&
        Password == ConfirmPassword;

    private string GetContinueButtonClasses() =>
        !IsFormValid || IsLoading
            ? "w-full bg-orange-300 text-white py-3 rounded-lg font-medium cursor-not-allowed mt-6"
            : "w-full bg-orange-500 text-white py-3 rounded-lg font-medium hover:bg-orange-600 mt-6";

    #region BottomSheets Methods

    private Task ReportToSupport(MouseEventArgs args)
    {
        // TODO: Implement support reporting — open chat, pre-fill email, or submit error log
        throw new NotImplementedException();
    }

    private async Task ResendToOriginalEmailAsync()
    {
        IsResendingEmail = true;
        ResendEmailMessage = string.Empty;
        try
        {
            var result = await OnboardingService.SendConfirmationEmailAsync(RegisteredUserId);
            ResendEmailMessage = result.Success
                ? "Confirmation email sent. Please check your inbox."
                : result.Message ?? "Failed to resend confirmation email.";
        }
        catch (Exception ex)
        {
            ResendEmailMessage = $"Error: {ex.Message}";
        }
        finally
        {
            IsResendingEmail = false;
        }
    }

    private async Task SendToNewEmailAsync(string newEmail)
    {

        var result = await OnboardingService.SendConfirmationEmailAsync(RegisteredUserId);

        ResendEmailMessage = result.Message;
        IsResendingEmail = false;

        if (!result.Success)
        {
            throw new Exception("Failed to send confirmation email.");
        }
    }

    private async Task CheckIfCustomerWasCreatedAsync(string email)
    {
        try
        {
            var result = await OnboardingService.VerifyIfOperationSuccessfulAsync(email);

            if (result.UserFound && result.ProfileFound && result.TokenFound)
            {
                RegisteredUserId = result.UserId ?? Guid.Empty;

                // 🔐 Check if token is already stored
                var accessToken = await TokenStorage.GetAccessTokenAsync();
                if (string.IsNullOrWhiteSpace(accessToken))
                {
                    // 🔁 Try to resend confirmation email (we lost this earlier)
                    var sendResult = await OnboardingService.SendConfirmationEmailAsync(RegisteredUserId);

                    if (sendResult.Success)
                    {
                        // ✅ Email re-sent; prompt user to check
                        ActiveBottomSheet = "email_confirmation"; // this is the correct bottomsheet for that case
                    }
                    else
                    {
                        // ❌ Failed to resend
                        ErrorMessage = sendResult.Message ?? "Failed to resend confirmation email.";
                        ActiveBottomSheet = "failure_send_confirmationemail";
                    }
                }
                else
                {
                    // ✅ All confirmed and token already present
                    NavigationManager.NavigateTo("/onboarding/success");
                }
            }
            else if (result.UserFound && !result.ProfileFound)
            {
                ActiveBottomSheet = "profile_creation_failed";
            }
            else if (result.UserFound && !result.TokenFound)
            {
                ActiveBottomSheet = "auth_register_failed";
            }
            else
            {
                ErrorMessage = "We couldn’t verify your registration. Please try again.";
                ActiveBottomSheet = "generic_error";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[Verification Error] {ex.Message}");
            ErrorMessage = "A system error occurred during verification.";
            ActiveBottomSheet = "generic_error";
        }
    }

    #endregion
}
