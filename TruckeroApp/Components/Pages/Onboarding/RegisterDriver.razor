@page "/registerdriver"
@using System.ComponentModel.DataAnnotations
@using System.Net
@using System.Net.Http
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using Truckero.Core.DTOs.Auth
@using Truckero.Core.DTOs.Common
@using Truckero.Core.DTOs.Media
@using Truckero.Core.DTOs.Onboarding
@using Truckero.Core.DTOs.PaymentMethodType
@using Truckero.Core.DTOs.PayoutAccount
@using Truckero.Core.DTOs.Shared
@using Truckero.Core.DTOs.Trucks
@using Truckero.Core.DataAnnotations
@using Truckero.Core.Exceptions
@using Truckero.Infrastructure.Services
@using TruckeroApp.Components.BottomSheets
@using TruckeroApp.Components.Pages.Driver
@using TruckeroApp.Components.Pages.Shared
@using TruckeroApp.Models
@using TruckeroApp.ServiceClients
@using TruckeroApp.Services.Media

@inject IOnboardingService OnboardingService
@inject NavigationManager NavigationManager
@inject ITokenStorageService TokenStorage
@inject IMediaPicker MediaPicker
@inject IMediaService MediaService
@inject ILocalStorageService LocalStorage
@inject ITruckService TruckService
@inject IPayoutAccountService PayoutAccountService
@inject IViewProviderApiClientService viewProviderApiClient;


<CenterWrapper>
    <div class="h-full text-base-content">
    <div id="app" class="min-h-screen bg-gray-50">
        <div id="registration-screen" class="p-6 min-h-screen">
            <div id="registration-header" class="flex items-center mb-8">
                <button class="text-gray-600" @onclick="NavigateBack">
                    <i class="fa-solid fa-arrow-left text-xl"></i>
                </button>
                <div class="text-center flex-1 mr-8">
                    <h2 class="text-xl font-semibold">Driver Registration</h2>
                </div>
            </div>

            <div id="registration-progress" class="mb-6">
                <div class="flex items-center justify-between mb-2">
                    <span class="text-sm text-gray-600">Step 2 of 3</span>
                    <span class="text-sm text-orange-500">Driver Details</span>
                </div>
                <div class="w-full bg-gray-200 rounded-full h-2">
                    <div class="bg-orange-500 h-2 rounded-full w-2/3"></div>
                </div>
            </div>

            <div id="role-indicator" class="bg-orange-100 p-3 rounded-lg mb-6 flex items-center">
                <i class="fa-solid fa-truck text-orange-500 mr-3"></i>
                <span class="text-sm text-orange-700">Registering as: <strong>DRIVER</strong></span>
            </div>

            <EditForm Model="DriverProfile" OnValidSubmit="SubmitAsync" OnInvalidSubmit="HandleInvalidSubmit" id="registration-form" class="space-y-4">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-red-500 text-sm mb-4" />

                <!-- Personal Information -->
                <div id="personal-info-section" class="space-y-4">
                    <div class="space-y-2">
                        <label class="block text-sm font-medium text-gray-700">Full Name</label>
                        <InputText @bind-Value="DriverProfile.FullName" class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-orange-500 focus:border-orange-500" placeholder="Enter your full name" />
                        <ValidationMessage For="@(() => DriverProfile.FullName)" class="text-red-500 text-xs" />
                    </div>

                    <div class="space-y-2">
                        <label class="block text-sm font-medium text-gray-700">Email Address</label>
                            <InputText @bind-Value="Email"
                                       type="email"
                                       class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                                       placeholder="Enter your email address" />

                        <ValidationMessage For="@(() => DriverProfile.Email)" class="text-red-500 text-xs" />
                    </div>

                    <div class="space-y-2">
                        <label class="block text-sm font-medium text-gray-700">Phone Number</label>
                        <InputText @bind-Value="DriverProfile.PhoneNumber" type="tel" class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-orange-500 focus:border-orange-500" placeholder="Enter your phone number" />
                        <ValidationMessage For="@(() => DriverProfile.PhoneNumber)" class="text-red-500 text-xs" />
                    </div>
                </div>

                <!-- License Section -->
                <div id="license-section" class="space-y-4 mt-6">
                    <h3 class="text-lg font-medium text-gray-800">Driver's License</h3>

                    @if (IsNameMismatch)
                    {
                        <div id="license-warning" class="bg-red-50 border border-red-200 rounded-lg p-4 flex items-start space-x-3">
                            <i class="fa-solid fa-triangle-exclamation text-red-500 mt-1"></i>
                            <p class="text-sm text-red-600">
                                The name on your driver's license doesn't match your registration name. Please ensure both names match exactly.
                            </p>
                        </div>
                    }

                    <div class="space-y-2">
                        <label class="block text-sm font-medium text-gray-700">License Number</label>
                        <InputText @bind-Value="DriverProfile.LicenseNumber"
                                   class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                                   placeholder="Enter license number" />
                        <ValidationMessage For="@(() => DriverProfile.LicenseNumber)" class="text-red-500 text-xs" />
                    </div>

                    <div class="grid grid-cols-2 gap-4">
                            <PhotoCaptureField Label="Front Side"
                                               FileType="license-front"
                                               Placeholder="Front Photo"
                                               ImageUrl="@LicenseFrontUrl"
                                               UserId="@UserId"
                                               OnUpload="HandleFrontPhotoUpload"
                                               OnUploadFailed="HandleFrontUploadFail" />

                            <PhotoCaptureField Label="Back Side"
                                               FileType="license-back"
                                               Placeholder="Back Photo"
                                               ImageUrl="@LicenseBackUrl"
                                               UserId="@UserId"
                                               OnUpload="HandleBackPhotoUpload"
                                               OnUploadFailed="HandleBackUploadFail" />
                    </div>
                </div>

                <!-- Trucks Section -->
                <TruckInfo 
                            RegisteredTrucks="RegisteredTrucks"
                            PendingTruckIds="@(RegisteredTrucks.Where(t => !t.IsActive && !t.IsVerified).Select(t => t.Id).ToList())"
                            OnEditTruck="EditTruck"
                            OnRemoveTruck="RemoveTruck"
                            OnAddNewTruck="AddNewTruck"
                            IsAddTruckEnabled="@IsValidEmail(DriverProfile.Email)"
                            GetAddTruckButtonClasses="@GetAddTruckButtonClasses" />


                <!-- Existing Payout Accounts -->
                @if (AvailablePayoutOptions.Count() == 0)
                {
                    <div class="text-gray-400 py-8 text-center text-sm">Loading payout options...</div>
                }
                else{
                    <PayoutAccountList
                        Accounts="ExistingPayoutAccounts"
                        GetPaymentMethodName="@(pmid => AvailablePayoutOptions.FirstOrDefault(x => x.Id == pmid)?.Name ?? "Payout Method")"
                        GetPayoutIcon="GetPayoutIcon"
                        OnEdit="EditPayoutAccount"
                        OnDelete="ConfirmDelete"
                        OnSetDefault="MakeDefault" />


                    <button @onclick="StartAddPayoutAccount" class="@GetAddTruckButtonClasses()">
                        + Manage Payout Accounts
                    </button>
                }

                <!-- Driver HomeBase -->
                <div class="space-y-5 mt-6">
                    <h3 class="text-lg font-medium text-gray-800">Your Work Area</h3>

                    <div class="flex items-center space-x-3">
                      <input type="text"
                             class="flex-1 px-4 py-2 rounded-lg border border-gray-300 bg-gray-100 text-gray-600 text-sm"
                             placeholder="123 Main Street, Los Angeles, CA"
                             readonly
                             value="@DriverProfile.HomeBase" />

                            <button type="button"
                                    class="h-[42px] px-3 bg-orange-100 hover:bg-orange-200 text-orange-700 rounded-lg flex items-center justify-center font-medium text-sm"
                                    @onclick="ShowMapPickerSheet">
                                Map
                            </button>


                    </div>

                    <div class="pt-4">
                        <label class="block text-sm font-medium text-gray-700 mb-1">Service Radius (km)</label>
                        <div class="flex items-center">
                            <input type="range" min="5" max="100" step="1"
                                   class="w-full accent-orange-500"
                                   @bind="DriverProfile.ServiceRadiusKm" />
                            <span class="ml-4 w-20 text-right text-sm text-gray-700">@DriverProfile.ServiceRadiusKm km</span>
                        </div>
                        <div class="mt-2 text-xs text-gray-500">
                            Serving within: <span class="font-medium text-orange-600">@DriverProfile.ServiceRadiusKm</span> km
                        </div>
                    </div>
                </div>

                <!-- Password Section -->
                <div id="password-section" class="space-y-4 mt-6">
                    <div class="space-y-2">
                        <label class="block text-sm font-medium text-gray-700">Password</label>
                        <div class="relative">
                            <InputText @bind-Value="Password" type="@(ShowPassword ? "text" : "password")" class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-orange-500 focus:border-orange-500" placeholder="Create password" />
                            <button type="button" @onclick="TogglePasswordVisibility" class="absolute right-3 top-3 text-gray-400">
                                <i class="fa-regular @(ShowPassword ? "fa-eye-slash" : "fa-eye") text-lg"></i>
                            </button>
                        </div>
                        <p class="text-xs text-gray-500 mt-1">Must be at least 8 characters long</p>
                        <ValidationMessage For="@(() => Password)" class="text-red-500 text-xs" />
                    </div>
                    <div class="space-y-2">
                        <label class="block text-sm font-medium text-gray-700">Confirm Password</label>
                        <div class="relative">
                            <InputText @bind-Value="ConfirmPassword" type="@(ShowConfirmPassword ? "text" : "password")" class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-orange-500 focus:border-orange-500" placeholder="Confirm password" />
                            <button type="button" @onclick="ToggleConfirmPasswordVisibility" class="absolute right-3 top-3 text-gray-400">
                                <i class="fa-regular @(ShowConfirmPassword ? "fa-eye-slash" : "fa-eye") text-lg"></i>
                            </button>
                        </div>
                        <ValidationMessage For="@(() => ConfirmPassword)" class="text-red-500 text-xs" />
                    </div>
                </div>

                <div class="flex items-start space-x-3 mt-6 mb-4">
                    <InputCheckbox @bind-Value="AcceptTerms" id="terms" class="mt-1 h-4 w-4 rounded border-gray-300 text-orange-500 focus:ring-orange-500" />
                    <label for="terms" class="text-sm text-gray-600">
                        I agree to Truckeo's <span class="text-orange-600 cursor-pointer" @onclick="ShowTermsOfService">Terms of Service</span> and <span class="text-orange-600 cursor-pointer" @onclick="ShowPrivacyPolicy">Privacy Policy</span>
                    </label>
                </div>
                @if (FormSubmitted && !AcceptTerms)
                {
                    <div class="text-red-500 text-xs">You must accept the terms and conditions to continue</div>
                }

                <button type="submit" class="@GetContinueButtonClasses()" disabled="@(!IsFormValid || IsLoading)">
                    @if (IsLoading)
                    {
                        <span class="inline-block animate-spin mr-2"><i class="fa-solid fa-circle-notch"></i></span>
                        <span>Processing...</span>
                    }
                    else
                    {
                        <span>Submit</span>
                    }
                </button>

                <div class="relative my-6">
                    <div class="absolute inset-0 flex items-center">
                        <div class="w-full border-t border-gray-300"></div>
                    </div>
                    <div class="relative flex justify-center text-sm">
                        <span class="px-2 bg-gray-50 text-gray-500">Or continue with</span>
                    </div>
                </div>

                <div class="grid grid-cols-2 gap-4">
                    <button type="button" @onclick="SignInWithGoogle" class="flex items-center justify-center px-4 py-3 border border-gray-300 rounded-lg hover:bg-gray-50">
                        <i class="fa-brands fa-google text-xl text-gray-600"></i>
                        <span class="ml-2">Google</span>
                    </button>
                    <button type="button" @onclick="SignInWithFacebook" class="flex items-center justify-center px-4 py-3 border border-gray-300 rounded-lg hover:bg-gray-50">
                        <i class="fa-brands fa-facebook text-xl text-blue-600"></i>
                        <span class="ml-2">Facebook</span>
                    </button>
                </div>

                <p class="text-sm text-center text-gray-600 mt-6">
                    Already have an account? <span class="text-orange-600 font-medium cursor-pointer" @onclick="NavigateToLogin">Log In</span>
                </p>
            </EditForm>

            @if (!string.IsNullOrEmpty(ActiveBottomSheet))
            {
                @switch (ActiveBottomSheet)
                {
                    case "map_picker":
                        <MapPickerBottomSheet OnDismiss="@(() => ActiveBottomSheet = null)"
                                                OnConfirm="HandleMapPick" />
                        break;

                    case "validation_failed":
                        <ValidationFailedBottomSheet ValidationErrors="@ValidationErrors"
                                                        OnDismiss="@(() => ActiveBottomSheet = null)" />
                        break;

                    case "weak_password":
                        <WeakPasswordBottomSheet OnDismiss="@(() => ActiveBottomSheet = null)" />
                        break;

                    case "invalid_phone_format":
                        <PhoneFormatErrorBottomSheet OnDismiss="@(() => ActiveBottomSheet = null)" />
                        break;

                    case "profile_creation_failed":
                        <ProfileCreationErrorBottomSheet OnDismiss="@(() => ActiveBottomSheet = null)" />
                        break;

                    case "progress_save_failed":
                        <ProgressSaveErrorBottomSheet OnDismiss="@(() => ActiveBottomSheet = null)" />
                        break;

                    case "auth_register_failed":
                        <AuthRegisterErrorBottomSheet OnDismiss="@(() => ActiveBottomSheet = null)" />
                        break;

                    case "failure_send_confirmationemail":
                        <EmailResendBottomSheet Email="@DriverProfile.Email"
                                                IsResendingEmail="@IsResendingEmail"
                                                ResendEmailMessage="@ResendEmailMessage"
                                                ResendToOriginalEmail="@ResendToOriginalEmailAsync"
                                                SendToNewEmail="@SendToNewEmailAsync"
                                                OnDismiss="@(() => ActiveBottomSheet = null)" />
                        break;

                    case "generic_error":
                        <GenericErrorBottomSheet Message="@ErrorMessage"
                                                    OnDismiss="@(() => ActiveBottomSheet = null)" />
                        break;

                    case "email_already_exist":
                        <UserExistsBottomSheet Email="@DriverProfile.Email"
                                                OnDismiss="@(() => ActiveBottomSheet = null)"
                                                OnLogin="@(() => NavigationManager.NavigateTo(AppRoutes.Login, forceLoad: true))" />
                        break;

                    case "email_confirmation":
                        <EmailConfirmationBottomSheet Email="@DriverProfile.Email"
                                                        RegisteredUserId="@RegisteredUserId" />
                        break;

                    case "registration_restored":
                        <RegistrationRestoredBottomSheet 
                          LastSaved="@savedData.LastUpdated.ToShortDateString()"
                          OnDismiss="@(() => ActiveBottomSheet = null)" />
                        break;
                }
            }

        </div>
    </div>
</div>
</CenterWrapper>

@using Truckero.Core.Entities

@code {
    private DriverProfileRequest DriverProfile { get; set; } = new DriverProfileRequest { CountryCode = "" };
    private EditContext? _editContext;
    private string? ActiveBottomSheet { get; set; }
    private List<string> ValidationErrors { get; set; } = new();
    private string ErrorMessage { get; set; } = string.Empty;
    private Guid RegisteredUserId { get; set; }
    private string ResendEmailMessage = string.Empty;
    private bool IsResendingEmail = false;
    private bool ShowMapPicker = false;
    private bool _bottomSheetWasShown = false;

    [Required]
    private Guid UserId { get; set; } = Guid.Empty;

    private string PasswordBacking = string.Empty;
    private string Password
    {
        get => PasswordBacking;
        set
        {
            PasswordBacking = value;
            DriverProfile.Password = value;
        }
    }

    private string ConfirmPasswordBacking = string.Empty;
    private string ConfirmPassword
    {
        get => ConfirmPasswordBacking;
        set
        {
            ConfirmPasswordBacking = value;
        }
    }

    private string? _licenseFrontUrl;
    private string? LicenseFrontUrl
    {
        get => _licenseFrontUrl;
        set
        {
            _licenseFrontUrl = value;
            DriverProfile.LicenseFrontUrl = value ?? string.Empty;
        }
    }

    private string? _licenseBackUrl;
    private string? LicenseBackUrl
    {
        get => _licenseBackUrl;
        set
        {
            _licenseBackUrl = value;
            DriverProfile.LicenseBackUrl = value ?? string.Empty;
        }
    }

    private bool AcceptTerms { get; set; } = false;
    private bool FormSubmitted { get; set; } = false;
    private bool IsLoading { get; set; } = false;
    private bool ShowPassword { get; set; } = false;
    private bool ShowConfirmPassword { get; set; } = false;
    private bool IsNameMismatch { get; set; } = false;

    private string Email
    {
        get => DriverProfile.Email;
        set
        {
            DriverProfile.Email = value;
            ValidateEmailLive();
        }
    }

    private bool IsExistingRegistration { get; set; } = false;

    private bool IsEditMode => IsExistingRegistration && UserId != Guid.Empty;

    private List<TruckRequest> RegisteredTrucks { get; set; } = new();

    private List<PaymentMethodTypeRequest> AvailablePayoutOptions { get; set; } = new();

    private List<PayoutAccountRequest> ExistingPayoutAccounts { get; set; } = new();

    private const string STORAGE_KEY = "driver_registration_form";

    private DriverRegistrationData savedData = null!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 🌐 Restore last saved data from local storage if present
            savedData = await LocalStorage.GetItemAsync<DriverRegistrationData>(STORAGE_KEY);

            if (savedData != null)
            {
                UserId = savedData.UserId;
                DriverProfile = savedData.Profile;
                Password = savedData.Password;
                ConfirmPassword = savedData.Password; // For validation to pass
                LicenseFrontUrl = savedData.LicenseFrontUrl;
                LicenseBackUrl = savedData.LicenseBackUrl;
                RegisteredTrucks = savedData.Trucks;
                ExistingPayoutAccounts = savedData.PayoutAccounts ?? new List<PayoutAccountRequest>();
                // IsExistingRegistration = savedData.IsRegisteredWithApi;
            }
            else
            {
                UserId = Guid.NewGuid();
                DriverProfile.UserId = UserId;
                IsExistingRegistration = false;
                RegisteredTrucks = new List<TruckRequest>();
                ExistingPayoutAccounts = new List<PayoutAccountRequest>();
            }

            // 🚚 Load driver trucks from API if in edit mode
            if (IsEditMode)
            {
                await LoadDriverTrucks();
            }

            // 💳 Load payout method types for dropdowns and display
            try
            {
                var countryCode = DriverProfile?.CountryCode ?? "CR";
                var refData = await viewProviderApiClient.GetPayoutPageReferenceDataAsync(countryCode);
                AvailablePayoutOptions = refData?.PayoutMethodTypes ?? new List<PaymentMethodTypeRequest>();
            }
            catch (Exception ex)
            {
                AvailablePayoutOptions = new List<PaymentMethodTypeRequest>();
                Console.WriteLine($"Failed to load payout options: {ex.Message}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[RegisterDriver] Initialization failed: {ex}");
            ErrorMessage = $"Initialization failed: {ex.Message}";
            // Optionally: ActiveBottomSheet = "generic_error";
        }
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && savedData != null && !_bottomSheetWasShown)
        {
            ErrorMessage = $"Your previous registration has been restored. Last saved: {savedData.LastUpdated}";
            ActiveBottomSheet = "registration_restored";
            _bottomSheetWasShown = true;
            StateHasChanged(); // <-- Triggers a *single* re-render to show the bottom sheet.
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task LoadDriverTrucks()
    {
        try
        {
            IsLoading = true;
            RegisteredTrucks = await TruckService.GetDriverTrucksAsync(UserId);
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Failed to load trucks: {ex.Message}";
            ActiveBottomSheet = "generic_error";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task LoadPayoutAccountsAsync()
    {
        var savedData = await LocalStorage.GetItemAsync<DriverRegistrationData>(STORAGE_KEY);
        ExistingPayoutAccounts = savedData?.PayoutAccounts ?? new List<PayoutAccountRequest>();
        StateHasChanged();
    }

    private async Task HandleDismiss()
    {
        // Clear the saved form data
        await LocalStorage.RemoveItemAsync("driver_registration_form");
        
        Console.Write("dafdsfsdfs");
    }

    private async Task SaveFormToLocalStorage()
    {
        // if (!IsFormValid) return; // Don't save invalid data
        
        var data = DriverRegistrationData.FromRegistrationForm(
            UserId,
            DriverProfile,
            Password,
            LicenseFrontUrl,
            LicenseBackUrl,
            RegisteredTrucks,
            ExistingPayoutAccounts
        );
        
        await LocalStorage.SetItemAsync(STORAGE_KEY, data);
    }

    private async Task AddNewTruck()
    {
        // Save the current form state before navigating
        await SaveFormToLocalStorage();

        // Navigate to the truck registration page with query param
        NavigationManager.NavigateTo("/registertruck?FromRegisterDriver=true");
    }

    private void EditTruck(TruckRequest truck)
    {
        // Use route navigation, passing the truck ID
        NavigationManager.NavigateTo($"/registertruck/{truck.Id}?fromRegisterDriver=true");
    }

    private async Task RemoveTruck(TruckRequest truck)
    {
        if (IsEditMode) // If editing existing driver, use API
        {
            try
            {
                IsLoading = true;
                
                var result = await TruckService.DeleteDriverTruckAsync(UserId, truck.Id);
                
                if (result.Success)
                {
                    // Reload the trucks after deletion
                    await LoadDriverTrucks();
                }
                else
                {
                    ErrorMessage = result.Message ?? "Failed to delete truck";
                    ActiveBottomSheet = "generic_error";
                }
            }
            catch (Exception ex)
            {
                ErrorMessage = $"Failed to delete truck: {ex.Message}";
                ActiveBottomSheet = "generic_error";
            }
            finally
            {
                IsLoading = false;
            }
        }
        else // During initial registration, just remove from local collection
        {
            RegisteredTrucks.Remove(truck);
            await SaveFormToLocalStorage(); // Save after removing truck
        }
    }

    private async Task SubmitAsync()
    {
        FormSubmitted = true;
        ActiveBottomSheet = null;
        ErrorMessage = string.Empty;

        if (!AcceptTerms || !IsFormValid)
        {
            Console.WriteLine("❌ Form invalid or terms not accepted.");
            ActiveBottomSheet = "validation_failed";
            return;
        }

        IsLoading = true;

        try
        {
            Console.WriteLine("🚛 Submitting DriverProfileRequest...");

            DriverProfile.Password = Password;
            DriverProfile.UserId = UserId;
            DriverProfile.LicenseFrontUrl = LicenseFrontUrl ?? string.Empty;
            DriverProfile.LicenseBackUrl = LicenseBackUrl ?? string.Empty;

            DriverProfile.Trucks = RegisteredTrucks.ToList();

            DriverProfile.PayoutAccounts = ExistingPayoutAccounts.ToList();

            var authTokenResponse = await OnboardingService.CompleteDriverOnboardingAsync(DriverProfile);

            if (authTokenResponse == null)
            {
                Console.WriteLine("❌ AuthTokenResponse is null.");
                ErrorMessage = "Unexpected error: no token received.";
                ActiveBottomSheet = "generic_error";
                return;
            }

            Console.WriteLine($"✅ Token received. Access: {authTokenResponse.AccessToken}, Refresh: {authTokenResponse.RefreshToken}");

            if (string.IsNullOrWhiteSpace(authTokenResponse.AccessToken))
            {
                Console.WriteLine("❌ Access token is missing.");
                ErrorMessage = "Access token was not issued.";
                ActiveBottomSheet = "generic_error";
                return;
            }

            if (string.IsNullOrWhiteSpace(authTokenResponse.RefreshToken))
            {
                Console.WriteLine("⚠️ Refresh token is missing.");
                ErrorMessage = "Refresh token was not issued.";
                ActiveBottomSheet = "generic_error";
                return;
            }

            try
            {
                await TokenStorage.SaveAccessTokenAsync(authTokenResponse.AccessToken);
                await TokenStorage.SaveRefreshTokenAsync(authTokenResponse.RefreshToken);
                Console.WriteLine("💾 Tokens saved successfully.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"❌ Token storage failed: {ex.Message}");
                ErrorMessage = "Failed to store login session.";
                ActiveBottomSheet = "generic_error";
                return;
            }

            RegisteredUserId = authTokenResponse.UserId;
            ActiveBottomSheet = "email_confirmation";

            await LocalStorage.RemoveItemAsync(STORAGE_KEY);
        }
        catch (OnboardingClientValidationException ex)
        {
            ValidationErrors = ex.Errors;
            Console.WriteLine($"❌ Validation failed with {ValidationErrors.Count} error(s).");
            ActiveBottomSheet = "validation_failed";
        }
        catch (OnboardingClientException ex)
        {
            ActiveBottomSheet = ex.StepCode;

            if (ActiveBottomSheet == "generic_error")
                ErrorMessage = ex.Message;
        }
        catch (HttpRequestException ex) when (ex.StatusCode == HttpStatusCode.Conflict)
        {
            Console.WriteLine($"⚠️ Conflict: {ex.Message}");
            ActiveBottomSheet = "user_exists";
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"❌ HTTP Error: {ex.StatusCode}, {ex.Message}");
            ErrorMessage = $"Server error: {ex.Message}";
            ActiveBottomSheet = "generic_error";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Unexpected error: {ex.Message}");
            ErrorMessage = "An unknown error occurred during registration.";
            ActiveBottomSheet = "generic_error";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private static Guid GenerateDeterministicGuidFromEmail(string email)
    {
        var hash = System.Security.Cryptography.SHA256.HashData(System.Text.Encoding.UTF8.GetBytes(email));
        return new Guid(hash.Take(16).ToArray());
    }

    private async void EditPayoutAccount(Guid payoutAccountId)
    {
        // This could open a modal or navigate, depending on your design.
        // For now, you might want to just navigate to the edit screen:
        await SaveFormToLocalStorage();
        NavigationManager.NavigateTo($"/registerpayoutaccount?FromRegisterDriver=true&PayoutAccountId={payoutAccountId}");
    }

    private async void ConfirmDelete(Guid payoutAccountId)
    {
        var acc = ExistingPayoutAccounts.FirstOrDefault(a => a.Id == payoutAccountId);
        if (acc != null)
        {
            ExistingPayoutAccounts.Remove(acc);

            // Update local storage
            var savedData = await LocalStorage.GetItemAsync<DriverRegistrationData>(STORAGE_KEY) ?? new DriverRegistrationData();
            savedData.PayoutAccounts = ExistingPayoutAccounts;
            await LocalStorage.SetItemAsync(STORAGE_KEY, savedData);

            await LoadPayoutAccountsAsync();
        }
    }

    private async Task MakeDefault(Guid payoutAccountId)
    {
        var savedData = await LocalStorage.GetItemAsync<DriverRegistrationData>(STORAGE_KEY) ?? new DriverRegistrationData();
        if (savedData.PayoutAccounts != null)
        {
            foreach (var acc in savedData.PayoutAccounts)
                acc.IsDefault = acc.Id == payoutAccountId;
            await LocalStorage.SetItemAsync(STORAGE_KEY, savedData);
            await LoadPayoutAccountsAsync();
        }
    }

    private async Task StartAddPayoutAccount()
    {
        // Open the add screen; you might navigate or open a modal
        await SaveFormToLocalStorage();
        NavigationManager.NavigateTo("/registerpayoutaccount?FromRegisterDriver=true");
    }
    
    private void HandleInvalidSubmit(EditContext context)
    {
        ValidationErrors = context.GetValidationMessages().Take(5).ToList();
        ActiveBottomSheet = "validation_failed";
    }

    private void ValidateEmailLive()
    {
        // Any state-dependent UI changes here
        StateHasChanged(); // If needed to refresh things like buttons
    }
    private void NavigateBack() => NavigationManager.NavigateTo(AppRoutes.StartupRouter);
    private void NavigateToLogin() => NavigationManager.NavigateTo(AppRoutes.Login);
    private void TogglePasswordVisibility() => ShowPassword = !ShowPassword;
    private void ToggleConfirmPasswordVisibility() => ShowConfirmPassword = !ShowConfirmPassword;

    private bool IsFormValid =>
        IsTextValid(DriverProfile.FullName) &&
        IsTextValid(DriverProfile.Email) &&
        IsTextValid(DriverProfile.PhoneNumber) &&
        IsTextValid(DriverProfile.LicenseNumber) &&
        UserId != Guid.Empty &&
        IsValidEmail(DriverProfile.Email) &&
        IsValidPassword() &&
        AcceptTerms;

    private bool IsTextValid(string? input) =>
        !string.IsNullOrWhiteSpace(input) && input.Trim().Length >= 4;

    private bool IsValidEmail(string? email)
    {
        if (string.IsNullOrWhiteSpace(email))
            return false;
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch (Exception ex) 
        {
            return false;
        }
    }

    private bool IsValidPassword() =>
        !string.IsNullOrWhiteSpace(Password) &&
        Password.Length >= 8 &&
        Password == ConfirmPassword;

    private string GetContinueButtonClasses() =>
        !IsFormValid || IsLoading
            ? "w-full bg-gray-300 text-white py-3 rounded-lg font-medium cursor-not-allowed mt-6"
            : "w-full bg-orange-500 text-white py-3 rounded-lg font-medium hover:bg-orange-600 mt-6";

    private string GetAddTruckButtonClasses() =>
        IsValidEmail(DriverProfile.Email)
            ? "w-full flex items-center justify-center px-4 py-3 bg-orange-50 text-orange-600 rounded-lg border border-orange-200 hover:bg-orange-100"
            : "w-full flex items-center justify-center px-4 py-3 bg-gray-300 text-gray-400 rounded-lg border border-gray-200 cursor-not-allowed";

    private string GetPayoutIcon(string typeName) => typeName switch
    {
        "BankAccount" or "Bank" => "fa-solid fa-building-columns text-gray-600",
        "SINPE" => "fa-solid fa-mobile-screen text-green-600",
        "PayPal" => "fa-brands fa-paypal text-[#003087]",
        _ => "fa-solid fa-wallet text-gray-500"
    };

    #region BottomSheets Methods

    private Task ReportToSupport(MouseEventArgs args)
    {
        throw new NotImplementedException();
    }

    private async Task ResendToOriginalEmailAsync()
    {
        IsResendingEmail = true;
        ResendEmailMessage = string.Empty;
        try
        {
            var result = await OnboardingService.SendConfirmationEmailAsync(RegisteredUserId);
            ResendEmailMessage = result.Success
                ? "Confirmation email sent. Please check your inbox."
                : result.Message ?? "Failed to resend confirmation email.";
        }
        catch (Exception ex)
        {
            ResendEmailMessage = $"Error: {ex.Message}";
        }
        finally
        {
            IsResendingEmail = false;
        }
    }

    private async Task SendToNewEmailAsync(string newEmail)
    {
        var result = await OnboardingService.SendConfirmationEmailAsync(RegisteredUserId);
        ResendEmailMessage = result.Message;
        IsResendingEmail = false;

        if (!result.Success)
        {
            throw new Exception("Failed to send confirmation email.");
        }
    }

    private async Task CheckIfCustomerWasCreatedAsync(string email)
    {
        try
        {
            var result = await OnboardingService.VerifyIfOperationSuccessfulAsync(email);

            if (result.UserFound && result.ProfileFound && result.TokenFound)
            {
                RegisteredUserId = result.UserId ?? Guid.Empty;
                var accessToken = await TokenStorage.GetAccessTokenAsync();

                if (string.IsNullOrWhiteSpace(accessToken))
                {
                    var sendResult = await OnboardingService.SendConfirmationEmailAsync(RegisteredUserId);
                    ActiveBottomSheet = sendResult.Success
                        ? "email_confirmation"
                        : "failure_send_confirmationemail";

                    ErrorMessage = sendResult.Message ?? "Failed to resend confirmation email.";
                }
                else
                {
                    NavigationManager.NavigateTo("/onboarding/success");
                }
            }
            else if (result.UserFound && !result.ProfileFound)
            {
                ActiveBottomSheet = "profile_creation_failed";
            }
            else if (result.UserFound && !result.TokenFound)
            {
                ActiveBottomSheet = "auth_register_failed";
            }
            else
            {
                ErrorMessage = "We couldn’t verify your registration. Please try again.";
                ActiveBottomSheet = "generic_error";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[Verification Error] {ex.Message}");
            ErrorMessage = "A system error occurred during verification.";
            ActiveBottomSheet = "generic_error";
        }
    }

    private async Task HandleMapPick(MapPickerBottomSheet.MapPickResult result)
    {
        DriverProfile.HomeBase = result.Address;
        DriverProfile.Latitude = result.Latitude;
        DriverProfile.Longitude = result.Longitude;
        DriverProfile.ServiceRadiusKm = result.RadiusKm;
        ShowMapPicker = false;
    }

    private void HandleFrontPhotoUpload(string url)
    {
        LicenseFrontUrl = url;
        DriverProfile.LicenseFrontUrl = url;
    }

    private void HandleBackPhotoUpload(string url)
    {
        LicenseBackUrl = url;
        DriverProfile.LicenseBackUrl = url;
    }

    private void HandleFrontUploadFail() => ShowUploadError("front");

    private void HandleBackUploadFail() => ShowUploadError("back");

    private void ShowUploadError(string side)
    {
        ErrorMessage = $"Failed to upload {side} photo.";
        ActiveBottomSheet = "generic_error";
    }

    private void ShowMapPickerSheet() => ActiveBottomSheet = "map_picker";

    private void SetServiceAreas() => NavigationManager.NavigateTo("/registerdriver/serviceareas");

    private void ShowTermsOfService() { }
    private void ShowPrivacyPolicy() { }
    private void SignInWithGoogle() { }
    private void SignInWithFacebook() { }

    #endregion

    // Add this property to format the last saved date
    private string LastSavedFormatted => 
        (LocalStorage.GetItemAsync<DriverRegistrationData>(STORAGE_KEY).Result?.LastUpdated ?? DateTime.Now)
            .ToString("MMM d, yyyy h:mm tt");
}
