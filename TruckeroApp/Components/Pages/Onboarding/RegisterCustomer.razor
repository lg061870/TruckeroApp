@page "/registercustomer"
@using System.ComponentModel.DataAnnotations
@using System.Net
@using System.Net.Http
@using System.Text.Json
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using Truckero.Core.DTOs.Auth
@using Truckero.Core.DTOs.Common
@using Truckero.Core.DataAnnotations
@using Truckero.Core.Exceptions
@using Truckero.Core.Interfaces.Services
@using TruckeroApp.Components.BottomSheets
@using TruckeroApp.DebugTools
@using TruckeroApp.Interfaces
@using TruckeroApp.ServiceClients
@using TruckeroApp.Services.Media

@inject IOnboardingService OnboardingService
@inject NavigationManager NavigationManager
@inject ITokenStorageService TokenStorage
@inject IMediaPicker MediaPicker
@inject IMediaService MediaService


<CenterWrapper>
    <div id="registration-screen" class="p-6 min-h-screen">
        <div id="registration-header" class="flex items-center mb-8">
            <button class="text-gray-600" @onclick="NavigateBack">
                <i class="fa-solid fa-arrow-left text-xl"></i>
            </button>
            <div class="text-center flex-1 mr-8">
                <h2 class="text-xl font-semibold">Customer Registration</h2>
            </div>
        </div>

        <div id="role-indicator" class="bg-[#FFF3E0] p-3 rounded-lg mb-6 flex items-center">
            <i class="fa-solid fa-box text-[#FF6B00] mr-3"></i>
            <span class="text-sm text-[#FF6B00]">Registering as: <strong>CUSTOMER</strong></span>
        </div>

        <EditForm EditContext="_editContext" OnValidSubmit="SubmitAsync" OnInvalidSubmit="HandleInvalidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-red-500 text-sm mb-4" />

            <div id="personal-info-section" class="space-y-4">
                <div class="space-y-2">
                    <label class="block text-sm font-medium text-gray-700">Full Name</label>
                    <InputText @bind-Value="CustomerProfile.FullName" class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-blue-500" placeholder="Enter your full name" />
                    <ValidationMessage For="@(() => CustomerProfile.FullName)" class="text-red-500 text-xs" />
                </div>

                <div class="space-y-2">
                    <label class="block text-sm font-medium text-gray-700">Email Address</label>
                    <InputText @bind-Value="CustomerProfile.Email" type="email" class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-blue-500" placeholder="Enter your email address" />
                    <ValidationMessage For="@(() => CustomerProfile.Email)" class="text-red-500 text-xs" />
                </div>

                <div class="space-y-2">
                    <label class="block text-sm font-medium text-gray-700">Phone Number</label>
                    <InputText @bind-Value="CustomerProfile.PhoneNumber" type="tel" class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-blue-500" placeholder="Enter your phone number" />
                    <ValidationMessage For="@(() => CustomerProfile.PhoneNumber)" class="text-red-500 text-xs" />
                </div>

                <div class="space-y-2">
                    <label class="block text-sm font-medium text-gray-700">Address</label>
                    <InputText @bind-Value="CustomerProfile.Address" class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-blue-500" placeholder="Enter your address" />
                    <ValidationMessage For="@(() => CustomerProfile.Address)" class="text-red-500 text-xs" />
                </div>
            </div>

            <div id="password-section" class="space-y-4 mt-6">
                <div class="space-y-2">
                    <label class="block text-sm font-medium text-gray-700">Password</label>
                    <div class="relative">
                        <InputText @bind-Value="Password" type="@(ShowPassword ? "text" : "password")" class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-blue-500" placeholder="Create password" />
                        <button type="button" @onclick="TogglePasswordVisibility" class="absolute right-3 top-3 text-gray-400">
                            <i class="fa-regular @(ShowPassword ? "fa-eye-slash" : "fa-eye") text-lg"></i>
                        </button>
                    </div>
                    <p class="text-xs text-gray-500 mt-1">Must be at least 8 characters long</p>
                    <ValidationMessage For="@(() => Password)" class="text-red-500 text-xs" />
                </div>

                <div class="space-y-2">
                    <label class="block text-sm font-medium text-gray-700">Confirm Password</label>
                    <div class="relative">
                        <InputText @bind-Value="ConfirmPassword" type="@(ShowConfirmPassword ? "text" : "password")" class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-blue-500" placeholder="Confirm password" />
                        <button type="button" @onclick="ToggleConfirmPasswordVisibility" class="absolute right-3 top-3 text-gray-400">
                            <i class="fa-regular @(ShowConfirmPassword ? "fa-eye-slash" : "fa-eye") text-lg"></i>
                        </button>
                    </div>
                    <ValidationMessage For="@(() => ConfirmPassword)" class="text-red-500 text-xs" />
                </div>
            </div>

            <div id="payment-section" class="mt-6 border-2 border-dashed border-[#DDDDDD] rounded-lg p-4" @onclick="AddPaymentMethod">
                <div class="flex items-center justify-between mb-2">
                    <div class="flex items-center space-x-2">
                        <i class="fa-solid fa-credit-card text-[#444444]"></i>
                        <span class="font-medium text-[#444444]">Add Payment Method</span>
                    </div>
                    <i class="fa-solid fa-chevron-right text-[#444444]"></i>
                </div>
                <p class="text-sm text-[#444444]">You'll only be charged when booking a trip</p>
            </div>

            <div class="flex items-start space-x-3 mt-6 mb-4">
                <InputCheckbox @bind-Value="AcceptTerms" id="terms" class="mt-1 h-4 w-4 rounded border-gray-300 text-[#FF6B00] focus:ring-[#FF6B00]" />
                <label for="terms" class="text-xs text-gray-600">
                    I agree to Truckeo's <span class="text-[#FF6B00] cursor-pointer" @onclick="ShowTermsOfService">Terms of Service</span> and <span class="text-[#FF6B00] cursor-pointer" @onclick="ShowPrivacyPolicy">Privacy Policy</span>
                </label>
            </div>

            @if (FormSubmitted && !AcceptTerms)
            {
                <div class="text-red-500 text-xs">
                    You must accept the terms and conditions to continue
                </div>
            }


            <button type="submit"
                    class="@GetCreateButtonClasses()"
                    disabled="@(!IsFormValid || IsLoading)">
                @if (IsLoading)
                {
                    <span class="inline-block animate-spin mr-2"><i class="fa-solid fa-circle-notch"></i></span>
                    <span>Processing...</span>
                }
                else
                {
                    <span>Create Account</span>
                }
            </button>


            <div class="relative my-6">
                <div class="absolute inset-0 flex items-center">
                    <div class="w-full border-t border-gray-300"></div>
                </div>
                <div class="relative flex justify-center text-sm">
                    <span class="px-2 bg-gray-50 text-gray-500">Or continue with</span>
                </div>
            </div>

            <div class="grid grid-cols-2 gap-4">
                <button type="button" @onclick="SignInWithGoogle" class="flex items-center justify-center px-4 py-3 border border-[#CCCCCC] rounded-lg bg-white hover:bg-gray-50">
                    <i class="fa-brands fa-google text-xl" style="color: #4285F4;"></i>
                    <span class="ml-2 text-gray-700">Google</span>
                </button>
                <button type="button" @onclick="SignInWithFacebook" class="flex items-center justify-center px-4 py-3 border border-[#CCCCCC] rounded-lg bg-white hover:bg-gray-50">
                    <i class="fa-brands fa-facebook text-xl" style="color: #1877F2;"></i>
                    <span class="ml-2 text-gray-700">Facebook</span>
                </button>
            </div>

            <p class="text-sm text-center text-gray-600 mt-6">
                Already have an account? <span class="text-[#FF6B00] font-medium cursor-pointer" @onclick="NavigateToLogin">Log In</span>
            </p>
        </EditForm>

        @if (!String.IsNullOrEmpty(ActiveBottomSheet))
        {
            @switch (ActiveBottomSheet)
            {
                case "validation_failed":
                    <ValidationFailedBottomSheet ValidationErrors="@ValidationErrors"
                                                 OnDismiss="@(() => ActiveBottomSheet = null)" />
                    break;

                case "weak_password":
                    <WeakPasswordBottomSheet OnDismiss="@(() => ActiveBottomSheet = null)" />
                    break;

                case "invalid_phone_format":
                    <PhoneFormatErrorBottomSheet OnDismiss="@(() => ActiveBottomSheet = null)" />
                    break;

                case "profile_creation_failed":
                    <ProfileCreationErrorBottomSheet OnDismiss="@(() => ActiveBottomSheet = null)" />
                    break;

                case "progress_save_failed":
                    <ProgressSaveErrorBottomSheet OnDismiss="@(() => ActiveBottomSheet = null)" />
                    break;

                case "auth_register_failed":
                    <AuthRegisterErrorBottomSheet OnDismiss="@(() => ActiveBottomSheet = null)" />
                    break;

                case "failure_send_confirmationemail":
                    <EmailResendBottomSheet Email="@CustomerProfile.Email"
                                            IsResendingEmail="@IsResendingEmail"
                                            ResendEmailMessage="@ResendEmailMessage"
                                            ResendToOriginalEmail="@ResendToOriginalEmailAsync"
                                            SendToNewEmail="@SendToNewEmailAsync"
                                            OnDismiss="@(() => ActiveBottomSheet = null)" />
                    break;

                case "generic_error":
                    <GenericErrorBottomSheet Message="@ErrorMessage"
                                             OnDismiss="@(() => ActiveBottomSheet = null)" />
                    break;
                case "email_already_exist":
                    <UserExistsBottomSheet Email="@CustomerProfile.Email"
                       OnDismiss="@(() => ActiveBottomSheet = null)"
                       OnLogin="@(() => NavigationManager.NavigateTo(AppRoutes.Login, forceLoad: true))" />

                    break;
                case "email_confirmation":
                    <EmailConfirmationBottomSheet Email="@CustomerProfile.Email"
                                                  RegisteredUserId="@RegisteredUserId" />
                    break;
            }
        }
    </div>
</CenterWrapper>


@code {
    private CustomerProfileRequest CustomerProfile { get; set; } = new CustomerProfileRequest();

    private string? ActiveBottomSheet { get; set; } = null;

    [Required]
    [MinLength(8, ErrorMessage = "Password must be at least 8 characters long")]
    private string Password { get; set; } = string.Empty;

    [Required]
    [Compare(nameof(Password), ErrorMessage = "Passwords do not match")]
    [StrongPassword(ErrorMessage = "Must include upper, lower, digit, and symbol")]
    private string ConfirmPassword { get; set; } = string.Empty;

    private bool AcceptTerms { get; set; } = false;
    private bool FormSubmitted { get; set; } = false;
    private bool IsLoading { get; set; } = false;
    private bool ShowPassword { get; set; } = false;
    private bool ShowConfirmPassword { get; set; } = false;
    private bool HasPaymentMethod { get; set; } = false;
    private string ErrorMessage { get; set; } = string.Empty;
    private EditContext? _editContext;
    private List<string> ValidationErrors { get; set; } = new();
    private string ResendEmailMessage = string.Empty;
    private bool IsResendingEmail = false;
    private string NewEmailForResend = string.Empty;
    private Guid RegisteredUserId; // Set this after registration

    protected override void OnInitialized()
    {
        _editContext = new EditContext(CustomerProfile);
        _editContext.OnFieldChanged += (sender, args) => StateHasChanged();
    }

    private async Task SubmitAsync()
    {
        FormSubmitted = true;
        ActiveBottomSheet = null;
        ErrorMessage = string.Empty;

        if (!AcceptTerms || !IsFormValid)
        {
            Console.WriteLine("❌ Form invalid or terms not accepted.");
            ActiveBottomSheet = "validation_failed";
            return;
        }

        IsLoading = true;

        try
        {
            Console.WriteLine("🚀 Submitting CustomerOnboardingRequest...");

            var completeProfile = new CustomerOnboardingRequest
            {
                FullName = CustomerProfile.FullName,
                Email = CustomerProfile.Email,
                PhoneNumber = CustomerProfile.PhoneNumber,
                Address = CustomerProfile.Address,
                Password = Password,
                HasPaymentMethod = HasPaymentMethod
            };

            var authTokenResponse = await OnboardingService.CompleteCustomerOnboardingAsync(completeProfile);

            if (authTokenResponse == null)
            {
                Console.WriteLine("❌ AuthTokenResponse is null.");
                ErrorMessage = "Unexpected error: no token received.";
                ActiveBottomSheet = "generic_error";
                return;
            }

            Console.WriteLine($"✅ Token received. Access: {authTokenResponse.AccessToken}, Refresh: {authTokenResponse.RefreshToken}");

            if (string.IsNullOrWhiteSpace(authTokenResponse.AccessToken))
            {
                Console.WriteLine("❌ Access token is missing.");
                ErrorMessage = "Access token was not issued.";
                ActiveBottomSheet = "generic_error";
                return;
            }

            if (string.IsNullOrWhiteSpace(authTokenResponse.RefreshToken))
            {
                Console.WriteLine("⚠️ Refresh token is missing.");
                ErrorMessage = "Refresh token was not issued.";
                ActiveBottomSheet = "generic_error";
                return;
            }

            try
            {
                await TokenStorage.SaveAccessTokenAsync(authTokenResponse.AccessToken);
                await TokenStorage.SaveRefreshTokenAsync(authTokenResponse.RefreshToken);
                Console.WriteLine("💾 Tokens saved successfully.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"❌ Token storage failed: {ex.Message}");
                ErrorMessage = "Failed to store login session.";
                ActiveBottomSheet = "generic_error";
                return;
            }

            // 🎉 Show confirmation
            RegisteredUserId = authTokenResponse.UserId;
            ActiveBottomSheet = "email_confirmation";
        }
        catch (OnboardingClientValidationException ex)
        {
            ValidationErrors = ex.Errors;
            Console.WriteLine($"❌ Validation failed with {ValidationErrors.Count} error(s).");
            ActiveBottomSheet = "validation_failed";
        }
        catch (OnboardingClientException ex)
        {
            ActiveBottomSheet = ex.StepCode;

            // Optionally assign structured error content
            if (ActiveBottomSheet == "generic_error")
                ErrorMessage = ex.Message;
        }
        catch (HttpRequestException ex) when (ex.StatusCode == HttpStatusCode.Conflict)
        {
            Console.WriteLine($"⚠️ Conflict: {ex.Message}");
            ActiveBottomSheet = "user_exists";
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"❌ HTTP Error: {ex.StatusCode}, {ex.Message}");
            ErrorMessage = $"Server error: {ex.Message}";
            ActiveBottomSheet = "generic_error";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Unexpected error: {ex.Message}");
            ErrorMessage = "An unknown error occurred during registration.";
            ActiveBottomSheet = "generic_error";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private void HandleInvalidSubmit(EditContext context)
    {
        ValidationErrors = context
            .GetValidationMessages()
            .Take(5) // Limit displayed errors
            .ToList();

        ActiveBottomSheet = "validation_failed";
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo(AppRoutes.StartupRouter, forceLoad: true);
    }

    private void NavigateToLogin()
    {
        NavigationManager.NavigateTo(AppRoutes.Login);
    }

    private void TogglePasswordVisibility()
    {
        ShowPassword = !ShowPassword;
    }

    private void ToggleConfirmPasswordVisibility()
    {
        ShowConfirmPassword = !ShowConfirmPassword;
    }

    private void AddPaymentMethod()
    {
        // In a real application, this would navigate to a payment information page
        // or open a modal to collect payment details
        NavigationManager.NavigateTo("/customer/payment/add");
    }

    private void ShowTermsOfService()
    {
        // Open terms of service modal or navigate to terms page
    }

    private void ShowPrivacyPolicy()
    {
        // Open privacy policy modal or navigate to privacy page
    }

    private void SignInWithGoogle()
    {
        // Implement Google authentication
    }

    private void SignInWithFacebook()
    {
        // Implement Facebook authentication
    }

    private void LoadDebugProfile(Dictionary<string, string> values)
    {
        // Fill in form fields from the debug profile
        if (values.TryGetValue(nameof(CustomerProfile.FullName), out var fullName))
            CustomerProfile.FullName = fullName;

        if (values.TryGetValue(nameof(CustomerProfile.Email), out var email))
            CustomerProfile.Email = email;

        if (values.TryGetValue(nameof(CustomerProfile.PhoneNumber), out var phoneNumber))
            CustomerProfile.PhoneNumber = phoneNumber;

        if (values.TryGetValue(nameof(CustomerProfile.Address), out var address))
            CustomerProfile.Address = address;

        if (values.TryGetValue(nameof(Password), out var password))
            Password = password;

        if (values.TryGetValue(nameof(ConfirmPassword), out var confirmPassword))
            ConfirmPassword = confirmPassword;

        if (values.TryGetValue(nameof(AcceptTerms), out var acceptTerms))
            AcceptTerms = bool.TryParse(acceptTerms, out var result) && result;

        StateHasChanged();
    }

    private bool IsFormValid =>
    IsTextValid(CustomerProfile.FullName) &&
    IsTextValid(CustomerProfile.Email) &&
    IsTextValid(CustomerProfile.PhoneNumber) &&
    IsTextValid(CustomerProfile.Address) &&
    IsValidEmail(CustomerProfile.Email) &&
    IsValidPassword() &&
    AcceptTerms;

    private bool IsTextValid(string? input) =>
        !string.IsNullOrWhiteSpace(input) && input.Trim().Length >= 4;

    private bool IsValidEmail(string? email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email ?? "");
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }

    private bool IsValidPassword() =>
        !string.IsNullOrWhiteSpace(Password) &&
        Password.Length >= 8 &&
        Password == ConfirmPassword;

    private string GetCreateButtonClasses() =>
        !IsFormValid || IsLoading
            ? "w-full bg-gray-300 text-white py-3 rounded-lg font-medium cursor-not-allowed"
            : "w-full bg-[#FF6B00] text-white py-3 rounded-lg font-medium hover:bg-[#E05A00]";

    #region BottomSheets Methods

    private Task ReportToSupport(MouseEventArgs args)
    {
        // TODO: Implement support reporting — open chat, pre-fill email, or submit error log
        throw new NotImplementedException();
    }

    private async Task ResendToOriginalEmailAsync()
    {
        IsResendingEmail = true;
        ResendEmailMessage = string.Empty;
        try
        {
            var result = await OnboardingService.SendConfirmationEmailAsync(RegisteredUserId);
            ResendEmailMessage = result.Success
                ? "Confirmation email sent. Please check your inbox."
                : result.Message ?? "Failed to resend confirmation email.";
        }
        catch (Exception ex)
        {
            ResendEmailMessage = $"Error: {ex.Message}";
        }
        finally
        {
            IsResendingEmail = false;
        }
    }

    private async Task SendToNewEmailAsync(string newEmail)
    {

        var result = await OnboardingService.SendConfirmationEmailAsync(RegisteredUserId);

        ResendEmailMessage = result.Message;
        IsResendingEmail = false;

        if (!result.Success)
        {
            throw new Exception("Failed to send confirmation email.");
        }
    }

    private async Task CheckIfCustomerWasCreatedAsync(string email)
    {
        try
        {
            var result = await OnboardingService.VerifyIfOperationSuccessfulAsync(email);

            if (result.UserFound && result.ProfileFound && result.TokenFound)
            {
                RegisteredUserId = result.UserId ?? Guid.Empty;

                // 🔐 Check if token is already stored
                var accessToken = await TokenStorage.GetAccessTokenAsync();
                if (string.IsNullOrWhiteSpace(accessToken))
                {
                    // 🔁 Try to resend confirmation email (we lost this earlier)
                    var sendResult = await OnboardingService.SendConfirmationEmailAsync(RegisteredUserId);

                    if (sendResult.Success)
                    {
                        // ✅ Email re-sent; prompt user to check
                        ActiveBottomSheet = "email_confirmation"; // this is the correct bottomsheet for that case
                    }
                    else
                    {
                        // ❌ Failed to resend
                        ErrorMessage = sendResult.Message ?? "Failed to resend confirmation email.";
                        ActiveBottomSheet = "failure_send_confirmationemail";
                    }
                }
                else
                {
                    // ✅ All confirmed and token already present
                    NavigationManager.NavigateTo("/onboarding/success");
                }
            }
            else if (result.UserFound && !result.ProfileFound)
            {
                ActiveBottomSheet = "profile_creation_failed";
            }
            else if (result.UserFound && !result.TokenFound)
            {
                ActiveBottomSheet = "auth_register_failed";
            }
            else
            {
                ErrorMessage = "We couldn’t verify your registration. Please try again.";
                ActiveBottomSheet = "generic_error";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[Verification Error] {ex.Message}");
            ErrorMessage = "A system error occurred during verification.";
            ActiveBottomSheet = "generic_error";
        }
    }

    #endregion
}



