@page "/emailnotverified"
@using Microsoft.Extensions.Logging
@using Truckero.Core.Interfaces.Services
@using TruckeroApp.Interfaces
@using TruckeroApp.Components.BottomSheets

@inject IOnboardingService OnboardingService
@inject IAuthService AuthService
@inject ITokenStorageService TokenStorage
@inject ILogger<EmailNotVerified> Logger
@inject NavigationManager NavManager

<CenterWrapper>
    <div class="p-6 max-w-md mx-auto text-center">
        <h2 class="text-2xl font-bold mb-4">Email Not Verified</h2>
        <p class="mb-4">
            Your email address has not been verified.<br />
            Please check your inbox and click the confirmation link to activate your account.
        </p>
        <p class="mb-4 text-sm text-gray-500">
            Didn’t get the email? Check your spam folder or request a new confirmation email below.
        </p>

        <div class="flex flex-col items-center gap-3 mt-4">
            <button class="w-full px-4 py-2 bg-[#FF6B00] text-white rounded-lg hover:bg-[#e66000] transition-colors duration-150"
                    @onclick="ResendConfirmationEmail"
                    disabled="@(IsResending || string.IsNullOrWhiteSpace(Email))">
                <span>@ResendButtonText</span>
            </button>

            <button class="w-full px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors duration-150 mt-2"
                    @onclick="Logout" disabled="@IsResending">
                Log Out
            </button>

            <button class="w-full px-4 py-2 bg-red-100 text-red-700 rounded-lg hover:bg-red-200 transition-colors duration-150 mt-2"
                    @onclick="() => ActiveBottomSheet = BottomSheetState.DeleteAccount" disabled="@IsResending">
                Delete My Account
            </button>
        </div>

        @switch (ActiveBottomSheet)
        {
            case BottomSheetState.DeleteAccount:
                <LoginToDeleteAccountBottomSheet OnDismiss="@(() => ActiveBottomSheet = BottomSheetState.None)" />
                break;

            case BottomSheetState.Confirmation:
                <EmailConfirmationBottomSheet Email="@Email" RegisteredUserId="@UserId.Value" />
                break;

            case BottomSheetState.GenericError:
                <GenericErrorBottomSheet Message="@GenericErrorMessage" OnDismiss="@(() => ActiveBottomSheet = BottomSheetState.None)" />
                break;
        }
    </div>
</CenterWrapper>

@code {
    private bool IsResending = false;
    private Guid? UserId;
    private string? Email;
    private string? ResendTarget = null;
    private string? GenericErrorMessage;
    private BottomSheetState ActiveBottomSheet = BottomSheetState.None;

    protected override async Task OnInitializedAsync()
    {
        var user = await AuthService.GetCurrentUserAsync();

        if (user == null)
        {
            const string fallbackMessage = "User not found or email not verified. Please log in again.";
            Logger.LogWarning(fallbackMessage);

            GenericErrorMessage = fallbackMessage;
            ActiveBottomSheet = BottomSheetState.GenericError;
            StateHasChanged();
            return;
        }

        UserId = user.Id;
        Email = user.Email;

        Logger.LogInformation("EmailNotVerified loaded: email = {Email}, userId = {UserId}", Email, UserId);
    }

    private async Task ResendConfirmationEmail()
    {
        if (UserId == null || string.IsNullOrWhiteSpace(Email))
        {
            Logger.LogWarning("User session invalid during resend attempt.");
            GenericErrorMessage = "User session is invalid. Please log in again.";
            ActiveBottomSheet = BottomSheetState.GenericError;
            StateHasChanged();
            return;
        }

        IsResending = true;
        ResendTarget = "original";

        try
        {
            Logger.LogInformation("Attempting to resend confirmation email for user: {UserId}", UserId);

            var result = await OnboardingService.SendConfirmationEmailAsync(UserId.Value);

            if (result.Success)
            {
                Logger.LogInformation("Confirmation email successfully resent to {Email}", Email);
                ActiveBottomSheet = BottomSheetState.Confirmation;
            }
            else
            {
                Logger.LogWarning("Resend failed: {Message}", result.Message);
                GenericErrorMessage = result.Message ?? "Failed to resend confirmation email.";
                ActiveBottomSheet = BottomSheetState.GenericError;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Unhandled exception during confirmation email resend.");
            GenericErrorMessage = ex.Message;
            ActiveBottomSheet = BottomSheetState.GenericError;
        }
        finally
        {
            IsResending = false;
            ResendTarget = null;
            StateHasChanged();
        }
    }

    private async Task Logout()
    {
        await TokenStorage.ClearAllAsync();
        NavManager.NavigateTo("/login", true);
    }

    private async Task HideDeleteSheet()
    {
        ActiveBottomSheet = BottomSheetState.DeleteAccount;
        await InvokeAsync(StateHasChanged);
    }

    private string ResendButtonText =>
        IsResending && ResendTarget == "original"
            ? "Sending..."
            : $"Resend to {Email}";
}
