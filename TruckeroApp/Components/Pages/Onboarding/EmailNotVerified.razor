@page "/emailnotverified"
@using Truckero.Core.Interfaces.Services
@using TruckeroApp.Interfaces
@inject IOnboardingService OnboardingService
@inject IAuthService AuthService
@inject ITokenStorageService TokenStorage
@inject NavigationManager NavManager

<CenterWrapper>
    <div class="p-6 max-w-md mx-auto text-center">
        <h2 class="text-2xl font-bold mb-4">Email Not Verified</h2>
        <p class="mb-4">
            Your email address has not been verified.<br />
            Please check your inbox and click the confirmation link to activate your account.
        </p>
        <p class="mb-4 text-sm text-gray-500">
            Didn’t get the email? Check your spam folder or request a new confirmation email below.
        </p>

        <div class="flex flex-col items-center gap-3 mt-4">
            <button class="w-full bg-[#FF6B00] text-white py-3 rounded-lg font-medium hover:bg-[#E05A00] focus:outline-none focus:ring-2 focus:ring-[#FF6B00] focus:ring-opacity-50 transition-colors duration-150"
                    @onclick="ResendConfirmationEmail"
                    disabled="@IsResending || string.IsNullOrWhiteSpace(Email)">
                @if (IsResending && ResendTarget == "original")
                {
                    <span>Sending...</span>
                }
                else
                {
                    <span>Resend to @Email</span>
                }
            </button>

@*             <div class="w-full flex flex-col items-center gap-2">
                <input class="w-full px-3 py-2 border rounded" placeholder="Enter new email address"
                       @bind="NewEmail" />
                <button class="w-full bg-blue-600 text-white py-3 rounded-lg font-medium hover:bg-blue-700 transition-colors duration-150"
                        @onclick="SendToNewEmail"
                        disabled="@IsResending || string.IsNullOrWhiteSpace(NewEmail)">
                    @if (IsResending && ResendTarget == "new")
                    {
                        <span>Sending...</span>
                    }
                    else
                    {
                        <span>Send to New Email</span>
                    }
                </button>
            </div> *@

            @if (!string.IsNullOrEmpty(ResendMessage))
            {
                <div class="text-sm mt-2 @(ResendSuccess ? "text-green-600" : "text-red-600")">@ResendMessage</div>
            }

            <button class="w-full text-[#FF6B00] font-medium py-3 rounded-lg hover:underline transition-colors duration-150 mt-2"
                    @onclick="Logout">
                Log Out
            </button>
        </div>
    </div>
</CenterWrapper>

@code {
    private bool IsResending = false;
    private string? ResendMessage;
    private bool ResendSuccess = false;
    private Guid? UserId;
    private string? Email;
    private string NewEmail = string.Empty;
    private string? ResendTarget = null; // "original" or "new"

    protected override async Task OnInitializedAsync()
    {
        // Try to get the current user to obtain their ID and email
        var user = await AuthService.GetCurrentUserAsync();
        UserId = user?.Id;
        Email = user?.Email;
    }

    private async Task ResendConfirmationEmail()
    {
        if (UserId == null || string.IsNullOrWhiteSpace(Email))
        {
            ResendMessage = "Unable to determine user. Please log in again.";
            ResendSuccess = false;
            return;
        }

        IsResending = true;
        ResendTarget = "original";
        ResendMessage = null;
        ResendSuccess = false;
        try
        {
            var result = await OnboardingService.SendConfirmationEmailAsync(UserId.Value);
            if (result.Success)
            {
                ResendMessage = "A new confirmation email has been sent.";
                ResendSuccess = true;
            }
            else
            {
                ResendMessage = result.Message ?? "Failed to send confirmation email. Please try again.";
                ResendSuccess = false;
            }
        }
        catch
        {
            ResendMessage = "Failed to send confirmation email. Please try again.";
            ResendSuccess = false;
        }
        finally
        {
            IsResending = false;
            ResendTarget = null;
        }
    }

    private async Task SendToNewEmail()
    {
        if (UserId == null || string.IsNullOrWhiteSpace(NewEmail))
        {
            ResendMessage = "Please enter a valid new email address.";
            ResendSuccess = false;
            return;
        }

        IsResending = true;
        ResendTarget = "new";
        ResendMessage = null;
        ResendSuccess = false;
        try
        {
            var result = await OnboardingService.SendConfirmationEmailAsync(UserId.Value, NewEmail);
            if (result.Success)
            {
                ResendMessage = "A new confirmation email has been sent to your new email address.";
                ResendSuccess = true;
            }
            else
            {
                ResendMessage = result.Message ?? "Failed to send confirmation email. Please try again.";
                ResendSuccess = false;
            }
        }
        catch
        {
            ResendMessage = "Failed to send confirmation email. Please try again.";
            ResendSuccess = false;
        }
        finally
        {
            IsResending = false;
            ResendTarget = null;
        }
    }

    private async Task Logout()
    {
        await TokenStorage.ClearAllAsync();
        NavManager.NavigateTo("/login", true);
    }
}