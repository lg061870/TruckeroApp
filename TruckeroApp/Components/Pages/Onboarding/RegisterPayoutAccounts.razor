@* @page "/" *@
@page "/registerpayoutaccount"
@page "/registerpayoutaccount/{PayoutAccountId:guid}"
@using System.Text.Json
@using Microsoft.AspNetCore.Components
@using Truckero.Core.DTOs.Onboarding
@using Truckero.Core.DTOs.PaymentMethodType
@using Truckero.Core.DTOs.PayoutAccount
@using Truckero.Core.DTOs.Shared
@using Truckero.Core.Entities
@using Truckero.Core.Exceptions
@using Truckero.Core.Interfaces.Services
@using TruckeroApp.Components.BottomSheets
@using TruckeroApp.Extensions
@using TruckeroApp.Models

@inject IPayoutAccountService PayoutAccountService
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@inject IViewProviderApiClientService ViewProviderApiClientService

<CenterWrapper>
    <div class="h-full text-base-content">
        <div id="app" class="min-h-screen bg-gray-50">
            <div id="payout-screen" class="p-6">
                <!-- Header -->
                <div id="payout-header" class="flex items-center mb-8">
                    @if (FromRegisterDriver)
                    {
                        <button class="text-gray-600" @onclick="NavigateBackToRegisterDriver">
                            <i class="fa-solid fa-arrow-left text-xl"></i>
                        </button>
                    }
                    else
                    {
                        <span style="width:40px;display:inline-block;"></span>
                    }
                    <div class="text-center flex-1 mr-8">
                        <h2 class="text-xl font-semibold">Payout Accounts</h2>
                        <p class="text-sm text-gray-600 mt-1">Manage how you receive earnings from your deliveries</p>
                    </div>
                </div>

                <!-- Progress spinner overlay -->
                @if (IsLoading || IsReferenceDataLoading)
                {
                    <div class="absolute inset-0 z-40 bg-white bg-opacity-70 flex flex-col items-center justify-center">
                        <span class="text-orange-500 text-lg font-semibold mb-2">Loading payout data...</span>
                        <span class="animate-spin text-3xl text-orange-500"><i class="fa fa-spinner"></i></span>
                    </div>
                }

                <!-- Existing Payout Accounts -->
                <PayoutAccountList
                    Accounts="ExistingPayoutAccounts"
                    GetPaymentMethodName="GetPaymentMethodName"
                    GetPayoutIcon="GetPayoutIcon"
                    OnEdit="EditPayoutAccount"
                    OnDelete="ConfirmDelete"
                    OnSetDefault="MakeDefault" />

                <!-- Payment Method Selector -->
                <div class="mb-6">
                    <div class="text-center mb-4">
                        <h2 class="text-lg font-medium text-gray-800">Add a Payout Account</h2>
                        <h3 class="text-sm text-gray-600">Select a payout option to continue</h3>
                    </div>

                    @if (IsReferenceDataLoading)
                    {
                        <p class="text-sm text-gray-400 text-center">Loading payout types...</p>
                    }
                    else if (!AvailablePayoutOptions.Any())
                    {
                        <p class="text-sm text-red-500 text-center">No payout options available. Please try again later.</p>
                    }
                    else
                    {
                        <div class="grid grid-cols-2 gap-3">
                            @foreach (var method in AvailablePayoutOptions)
                            {
                                // UX: If only one allowed for this method, disable or hide if already exists
                                bool isUniqueType = method.Name == "Google Wallet" || method.Name == "Apple Wallet";
                                bool alreadyAdded = ExistingPayoutAccounts.Any(a =>
                                    a.PaymentMethodTypeId == method.Id);


                                var isDisabled = isUniqueType && alreadyAdded;

                                <div class="@GetPaymentOptionClass(method.Name) @(isDisabled ? "opacity-50 pointer-events-none" : "")"
                                     @onclick="!isDisabled ? (() => StartAddPayoutAccount(method.Name)) : null"
                                     aria-disabled="@isDisabled">
                                    <i class="@GetPayoutIcon(method.Name) text-2xl mb-2"></i>
                                    <p class="text-sm font-medium">@method.Name</p>
                                    @if (isDisabled)
                                    {
                                        <span class="text-xs text-gray-400">(Already added)</span>
                                    }
                                </div>
                            }
                        </div>
                    }
                </div>

                <!-- BottomSheets for error/validation feedback -->
                @if (!string.IsNullOrEmpty(ActiveBottomSheet))
                {
                    @switch (ActiveBottomSheet)
                    {
                        case "generic_error":
                            <GenericErrorBottomSheet 
                                Message="@ErrorMessage" 
                                OnDismiss="HandleGenericErrorDismiss" />
                            break;
                        case "validation_failed":
                            <ValidationFailedBottomSheet 
                                ValidationErrors="@ValidationErrors" 
                                OnDismiss="@(() => ActiveBottomSheet = null)" />
                            break;
                        case "referential_integrity":
                            <ReferentialIntegrityBottomSheet
                                ErrorCode="@ReferentialIntegrityBottomSheetErrorCode"
                                Message="@ReferentialIntegrityBottomSheetMessage"
                                OnDismiss="@(() => ActiveBottomSheet = null)" />
                            break;
                    }
                }
            </div>

            <!-- Add/Edit Bottom Sheet -->
            <div class="fixed inset-x-0 bottom-0 transition-transform duration-300 ease-in-out z-50"
                 style="@(ShowAddSheet ? "transform: translateY(0);" : "transform: translateY(100%);")">
                <div class="bg-white rounded-t-2xl p-6 max-h-[90vh] overflow-y-auto">
                    <div class="flex justify-between items-center mb-6">
                        <h3 class="text-lg font-semibold">
                            @(IsEditMode ? $"Edit {SelectedPayoutTypeName}" : $"Add {SelectedPayoutTypeName}")
                        </h3>
                        <button class="text-gray-400" @onclick="ToggleAddSheet">
                            <i class="fa-solid fa-xmark text-xl"></i>
                        </button>
                    </div>
                    @if (ShowAddSheet && !string.IsNullOrEmpty(SelectedPayoutTypeName))
                    {
                        <PayoutAccountForm
                            PaymentMethodType="@SelectedPayoutTypeName"
                            AvailableBanks="@AvailableBanks"
                            EditFields="@(IsEditMode ? new Dictionary<string, string>(CurrentPayoutAccountJSON?.Fields ?? new()) : null)"
                            IsEditMode="@IsEditMode"
                            OnSubmit="HandlePayoutAccountSubmitted" />
                    }
                </div>
            </div>

            <!-- Delete Confirmation Bottom Sheet -->
            <div class="fixed inset-x-0 bottom-0 transition-transform duration-300 ease-in-out z-50"
                 style="@($"transform: translateY({(ShowDeleteSheet ? "0" : "100%")});")">
                <div class="bg-white rounded-t-2xl p-6">
                    <div class="text-center mb-6">
                        <div class="w-12 h-12 mx-auto mb-4 text-red-500">
                            <i class="fa-solid fa-triangle-exclamation text-4xl"></i>
                        </div>
                        <h3 class="text-lg font-semibold mb-2">Delete this payout account?</h3>
                        <p class="text-sm text-gray-600">@PayoutAccountToDeleteDescription</p>
                    </div>
                    <div class="space-y-3">
                        <button class="w-full py-3 bg-red-600 text-white rounded-lg font-medium"
                                @onclick="DeletePayoutAccountAsync">
                            Confirm Delete
                        </button>
                        <button class="w-full py-3 bg-gray-100 text-gray-600 rounded-lg font-medium"
                                @onclick="ToggleDeleteSheet">
                            Cancel
                        </button>
                    </div>
                </div>
            </div>

        </div>
    </div>
</CenterWrapper>

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public bool FromRegisterDriver { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public Guid? PayoutAccountId { get; set; }

    [Inject] private IAuthSessionContext AuthSession { get; set; }

    private Guid UserId => AuthSession.LoggedUser.Id;

    // Holds payout accounts already registered for the user
    private List<PayoutAccountRequest> ExistingPayoutAccounts = new();

    // Options user can select for payout (e.g. Bank, SINPE, PayPal)
    private List<PaymentMethodTypeRequest> AvailablePayoutOptions = new();

    // Banks available for selected country (for dropdown)
    private List<BankRequest> AvailableBanks = new();

    // List of all countries supported by payout feature
    private List<CountryRequest> AvailableCountries = new();

    // This will be the in-progress account used for the add/edit form
    private PayoutAccountJSONType CurrentPayoutAccountJSON { get; set; }


    private string? SelectedCountryCode = "CR";
    private string? SelectedPayoutTypeName;
    private Guid EditingPayoutAccountId;
    private bool ShowAddSheet = false;
    private bool ShowDeleteSheet = false;
    private bool IsEditMode = false;
    private bool IsLoading = false;
    private bool IsReferenceDataLoading = true;
    private PayoutAccountFormModel CurrentPayoutAccount { get; set; } = new();

    // Delete info
    private Guid PayoutAccountToDeleteId;
    private string PayoutAccountToDeleteDescription = "";

    // Error/Feedback
    private string ErrorMessage { get; set; } = string.Empty;
    private string? ActiveBottomSheet { get; set; } = null;
    private List<string> ValidationErrors { get; set; } = new();
    private string? ReferentialIntegrityBottomSheetErrorCode { get; set; }
    private string? ReferentialIntegrityBottomSheetMessage { get; set; }
    private bool IsReferentialIntegrityBottomSheetVisible { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        await LoadReferenceDataAsync();

        if (PayoutAccountId.HasValue && PayoutAccountId.Value != Guid.Empty)
        {
            IsEditMode = true;
            EditingPayoutAccountId = PayoutAccountId.Value;

            if (FromRegisterDriver)
            {
                DriverRegistrationData? savedData = await LocalStorage.GetItemAsync<DriverRegistrationData>("driver_registration_form");
                // Find by Id (unique payout account), or if you want by PaymentMethodTypeId, but it's better to use Id if you have it.
                PayoutAccountRequest? acc = savedData?.PayoutAccounts?.FirstOrDefault(p => p.Id == EditingPayoutAccountId);
                if (acc != null)
                {
                    CurrentPayoutAccount = acc.ToPayoutAccountFormModel(); // Use your extension!
                    SelectedPayoutTypeName = GetPaymentMethodName(acc.PaymentMethodTypeId);
                    ShowAddSheet = true;
                }
            }
            else
            {
                Truckero.Core.DTOs.PayoutAccount.PayoutAccountResponse? response = await PayoutAccountService.GetPayoutAccountByIdAsync(EditingPayoutAccountId);
                PayoutAccountRequest? acc = response?.PayoutAccounts?.FirstOrDefault(p => p.Id == EditingPayoutAccountId);
                if (acc != null)
                {
                    CurrentPayoutAccount = acc.ToPayoutAccountFormModel(); // Use your extension!
                    SelectedPayoutTypeName = GetPaymentMethodName(acc.PaymentMethodTypeId);
                    ShowAddSheet = true;
                }
            }
        }

        await LoadPayoutAccountsAsync();
        IsLoading = false;
    }

    private async Task LoadReferenceDataAsync()
    {
        IsReferenceDataLoading = true;
        try
        {
            var countryCode = string.IsNullOrWhiteSpace(SelectedCountryCode) ? "CR" : SelectedCountryCode.Trim().ToUpperInvariant();
            var refData = await ViewProviderApiClientService.GetPayoutPageReferenceDataAsync(countryCode);

            AvailablePayoutOptions = refData?.PayoutMethodTypes ?? new List<PaymentMethodTypeRequest>();
            AvailableBanks = refData?.Banks ?? new List<BankRequest>();
            AvailableCountries = refData?.Countries ?? new List<CountryRequest>();
        }
        catch (Exception ex)
        {
            ShowGenericError($"Failed to load payout reference data: {ex.Message}");
            AvailablePayoutOptions = new List<PaymentMethodTypeRequest>();
            AvailableBanks = new List<BankRequest>();
            AvailableCountries = new List<CountryRequest>();
        }
        finally
        {
            IsReferenceDataLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadPayoutAccountsAsync()
    {
        if (FromRegisterDriver)
        {
            DriverRegistrationData? savedData = await LocalStorage.GetItemAsync<DriverRegistrationData>("driver_registration_form");
            ExistingPayoutAccounts = savedData?.PayoutAccounts?.ToList() ?? new();
        }
        else
        {
            // API returns List<PayoutAccountResponse> and each response has List<PayoutAccountRequest>
            Truckero.Core.DTOs.PayoutAccount.PayoutAccountResponse apiList = await PayoutAccountService.GetPayoutAccountsByUserIdAsync(UserId);
            ExistingPayoutAccounts = apiList.PayoutAccounts;
        }
    }

    private void StartAddPayoutAccount(string typeName)
    {
        SelectedPayoutTypeName = typeName;
        IsEditMode = false;
        ShowAddSheet = true;

        // Assign a new Guid as the unique key
        CurrentPayoutAccountJSON = new PayoutAccountJSONType
        {
            Id = Guid.NewGuid(), // <-- Ensures uniqueness even for same type
            PayoutMethodType = typeName,
            Fields = new Dictionary<string, string>() // Default empty fields, can pre-populate if needed
        };
    }

    private async void EditPayoutAccount(Guid payoutAccountId)
    {
        IsEditMode = true;
        EditingPayoutAccountId = payoutAccountId;

        PayoutAccountRequest? acc = null;
        if (FromRegisterDriver)
        {
            var savedData = await LocalStorage.GetItemAsync<DriverRegistrationData>("driver_registration_form");
            acc = savedData?.PayoutAccounts?.FirstOrDefault(p => p.Id == payoutAccountId);
        }
        else
        {
            var response = await PayoutAccountService.GetPayoutAccountByIdAsync(payoutAccountId) as Truckero.Core.DTOs.PayoutAccount.PayoutAccountResponse;
            // Adjusted for the list-style response (per your recent changes):
            acc = response?.PayoutAccounts?.FirstOrDefault(p => p.Id == payoutAccountId);
        }

        if (acc != null)
        {
            SelectedPayoutTypeName = GetPaymentMethodName(acc.PaymentMethodTypeId);

            Dictionary<string, string> fields = new();
            if (!string.IsNullOrWhiteSpace(acc.MetadataJson))
            {
                try
                {
                    fields = JsonSerializer.Deserialize<Dictionary<string, string>>(acc.MetadataJson)
                            ?? new Dictionary<string, string>();
                }
                catch
                {
                    fields = new Dictionary<string, string>();
                }
            }

            CurrentPayoutAccountJSON = new PayoutAccountJSONType
            {
                Id = acc.Id,
                IsSaved = true,
                PayoutMethodType = SelectedPayoutTypeName,
                Fields = fields
            };
            ShowAddSheet = true;
        }
        else
        {
            ShowGenericError("Payout account not found for editing.");
        }

        StateHasChanged();
    }

    private void ConfirmDelete(Guid payoutAccountId)
    {
        var acc = ExistingPayoutAccounts.FirstOrDefault(a => a.Id == payoutAccountId);

        // Get payment method name from options using helper
        string methodName = acc != null ? GetPaymentMethodName(acc.PaymentMethodTypeId) : "";

        string last4 = !string.IsNullOrEmpty(acc?.AccountNumberLast4) ? $"account-number# {acc.AccountNumberLast4}" : "";

        PayoutAccountToDeleteId = payoutAccountId;
        PayoutAccountToDeleteDescription = $"Delete {methodName} {last4}".Trim();
        ShowDeleteSheet = true;
        StateHasChanged();
    }

    private void ToggleAddSheet()
    {
        ShowAddSheet = !ShowAddSheet;
        if (!ShowAddSheet)
        {
            SelectedPayoutTypeName = null;
        }
    }

    private void ToggleDeleteSheet() => ShowDeleteSheet = !ShowDeleteSheet;

    private void NavigateBackToRegisterDriver()
    {
        NavigationManager.NavigateTo("/registerdriver");
    }

    private string GetPayoutIcon(string typeName) => typeName switch
    {
        "BankAccount" or "Bank" => "fa-solid fa-building-columns text-gray-600",
        "SINPE" => "fa-solid fa-mobile-screen text-green-600",
        "PayPal" => "fa-brands fa-paypal text-[#003087]",
        _ => "fa-solid fa-wallet text-gray-500"
    };

    private string GetPaymentOptionClass(string typeName)
    {
        var baseClass = "border rounded-lg p-4 cursor-pointer hover:border-orange-500";
        return SelectedPayoutTypeName == typeName
        ? $"{baseClass} border-2 border-orange-500 bg-orange-50"
        : $"{baseClass} border-gray-300";
    }

    private async Task SavePayoutAccountAsync()
    {
        // Find the Guid directly for the selected payout method type name
        var methodGuid = AvailablePayoutOptions
            .FirstOrDefault(x => x.Name == CurrentPayoutAccountJSON.PayoutMethodType)?.Id ?? Guid.Empty;

        var req = new PayoutAccountRequest
        {
            Id = CurrentPayoutAccountJSON.Id, // <-- Key part: unique per account
            PaymentMethodTypeId = methodGuid,
            MetadataJson = JsonSerializer.Serialize(CurrentPayoutAccountJSON.Fields),
            IsDefault = !ExistingPayoutAccounts.Any(),
            // Populate other fields as needed
        };

        if (FromRegisterDriver)
        {
            string storageKey = "driver_registration_form";
            DriverRegistrationData savedData = await LocalStorage.GetItemAsync<DriverRegistrationData>(storageKey) ?? new DriverRegistrationData();

            // Find by Id, not by PaymentMethodTypeId!
            int idx = savedData.PayoutAccounts?.FindIndex(p => p.Id == req.Id) ?? -1;
            if (idx >= 0)
                savedData.PayoutAccounts[idx] = req;
            else
                (savedData.PayoutAccounts ??= new()).Add(req);

            await LocalStorage.SetItemAsync(storageKey, savedData);
            ShowAddSheet = false;
            await LoadPayoutAccountsAsync();
            NavigationManager.NavigateTo("/registerdriver");
        }
        else
        {
            try
            {
                IsLoading = true;
                if (IsEditMode)
                {
                    await PayoutAccountService.UpdatePayoutAccountAsync(UserId, req.Id, req);
                }
                else
                {
                    await PayoutAccountService.AddPayoutAccountAsync(UserId, req);
                }
                ShowAddSheet = false;
                await LoadPayoutAccountsAsync();
            }
            catch (PayoutAccountClientValidationException vex)
            {
                ShowValidationFailed(vex.ValidationMessages);
            }
            catch (ReferentialIntegrityClientException rex)
            {
                ShowReferentialIntegrityBottomSheet(rex.ErrorCode, rex.Message);
            }
            catch (PayoutAccountClientException cex)
            {
                ShowGenericError($"{cex.Message} (Code: {cex.Code})");
            }
            catch (HttpRequestException)
            {
                ShowGenericError("Server communication failed. Please try again.");
            }
            catch (Exception ex)
            {
                ShowGenericError("Unexpected error: " + ex.Message);
            }
            finally
            {
                IsLoading = false;
            }
        }
    }

    private async Task DeletePayoutAccountAsync()
    {
        if (FromRegisterDriver)
        {
            var storageKey = "driver_registration_form";
            var savedData = await LocalStorage.GetItemAsync<DriverRegistrationData>(storageKey);
            if (savedData != null)
            {
                savedData.PayoutAccounts?.RemoveAll(p => p.Id == PayoutAccountToDeleteId);
                await LocalStorage.SetItemAsync(storageKey, savedData);
                ShowDeleteSheet = false;
                await LoadPayoutAccountsAsync();
            }
        }
        else
        {
            await PayoutAccountService.DeletePayoutAccountAsync(UserId, PayoutAccountToDeleteId);
            ShowDeleteSheet = false;
            await LoadPayoutAccountsAsync();
        }
    }

    private async Task MakeDefault(Guid payoutAccountId)
    {
        if (FromRegisterDriver)
        {
            // Update in LocalStorage
            string storageKey = "driver_registration_form";
            var savedData = await LocalStorage.GetItemAsync<DriverRegistrationData>(storageKey) ?? new DriverRegistrationData();
            if (savedData.PayoutAccounts != null)
            {
                foreach (var acc in savedData.PayoutAccounts)
                    acc.IsDefault = acc.Id == payoutAccountId;
                await LocalStorage.SetItemAsync(storageKey, savedData);
                await LoadPayoutAccountsAsync();
            }
        }
        else
        {
            // Call your API/service to set default on the server
            await PayoutAccountService.SetDefaultPayoutAccountAsync(UserId, payoutAccountId);
            await LoadPayoutAccountsAsync();
        }
    }

    private void ShowGenericError(string message)
    {
        ErrorMessage = message;
        ActiveBottomSheet = "generic_error";
    }

    private void ShowValidationFailed(List<string> errors)
    {
        ValidationErrors = errors;
        ActiveBottomSheet = "validation_failed";
    }

    private void ShowReferentialIntegrityBottomSheet(string code, string message)
    {
        ActiveBottomSheet = "referential_integrity";
        ReferentialIntegrityBottomSheetErrorCode = code;
        ReferentialIntegrityBottomSheetMessage = message;
        IsReferentialIntegrityBottomSheetVisible = true;
    }

    private void HandleGenericErrorDismiss()
    {
        ActiveBottomSheet = null;
    }

    private async Task HandlePayoutAccountSubmitted((string PayoutMethodType, string MetadataJson) result)
    {
        var (methodType, metadataJson) = result;
        var fields = JsonSerializer.Deserialize<Dictionary<string, string>>(metadataJson ?? "{}");

        // Extract the nickname from the deserialized fields (safe for missing/null)
        var payoutAccountNickName = fields != null && fields.TryGetValue("PayoutAccountNickName", out var nicknameVal)
            ? nicknameVal
            : string.Empty;

        // Find method type Guid directly
        var methodGuid = AvailablePayoutOptions
            .FirstOrDefault(x => x.Name == methodType)?.Id ?? Guid.Empty;

        // Use the current (possibly new) payout account Id, or assign if missing
        var accountId = (CurrentPayoutAccountJSON?.Id != Guid.Empty && CurrentPayoutAccountJSON?.Id != null)
            ? CurrentPayoutAccountJSON.Id
            : Guid.NewGuid();

        var req = new PayoutAccountRequest
        {
            Id = accountId,
            PaymentMethodTypeId = methodGuid,
            MetadataJson = metadataJson,
            IsDefault = !ExistingPayoutAccounts.Any(),
            PayoutAccountNickName = payoutAccountNickName
        };

        if (FromRegisterDriver)
        {
            string storageKey = "driver_registration_form";
            DriverRegistrationData savedData = await LocalStorage.GetItemAsync<DriverRegistrationData>(storageKey) ?? new DriverRegistrationData();

            // Find by Id, not by PaymentMethodTypeId!
            int idx = savedData.PayoutAccounts?.FindIndex(p => p.Id == req.Id) ?? -1;
            if (idx >= 0)
                savedData.PayoutAccounts[idx] = req;
            else
                (savedData.PayoutAccounts ??= new()).Add(req);

            await LocalStorage.SetItemAsync(storageKey, savedData);
            ShowAddSheet = false;              // Hide the add/edit bottomsheet
            await LoadPayoutAccountsAsync();   // Refresh the list in UI
            // No navigation away!
        }
        else
        {
            try
            {
                IsLoading = true;
                if (IsEditMode)
                {
                    await PayoutAccountService.UpdatePayoutAccountAsync(UserId, req.Id, req);
                }
                else
                {
                    await PayoutAccountService.AddPayoutAccountAsync(UserId, req);
                }
                ShowAddSheet = false;              // Hide the add/edit bottomsheet
                await LoadPayoutAccountsAsync();   // Refresh the list in UI
                // No navigation away!
            }
            catch (PayoutAccountClientValidationException vex)
            {
                ShowValidationFailed(vex.ValidationMessages);
            }
            catch (ReferentialIntegrityClientException rex)
            {
                ShowReferentialIntegrityBottomSheet(rex.ErrorCode, rex.Message);
            }
            catch (PayoutAccountClientException cex)
            {
                ShowGenericError($"{cex.Message} (Code: {cex.Code})");
            }
            catch (HttpRequestException)
            {
                ShowGenericError("Server communication failed. Please try again.");
            }
            catch (Exception ex)
            {
                ShowGenericError("Unexpected error: " + ex.Message);
            }
            finally
            {
                IsLoading = false;
            }
        }
    }

    private string GetPaymentMethodName(Guid paymentMethodTypeId)
    => AvailablePayoutOptions.FirstOrDefault(x => x.Id == paymentMethodTypeId)?.Name ?? "Unknown";

}