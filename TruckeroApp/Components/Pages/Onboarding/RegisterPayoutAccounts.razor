@* @page "/" *@
@page "/registerpayoutaccount"
@page "/registerpayoutaccount/{PayoutAccountId:guid}"
@using Microsoft.AspNetCore.Components
@using Truckero.Core.Entities
@using Truckero.Core.Exceptions
@using Truckero.Core.Interfaces.Services
@using Truckero.Core.DTOs.Onboarding
@using TruckeroApp.Models
@using TruckeroApp.Extensions
@using TruckeroApp.Components.BottomSheets

@inject IPayoutAccountService PayoutAccountService
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage

<CenterWrapper>
    <div class="h-full text-base-content">
        <div id="app" class="min-h-screen bg-gray-50">
            <div id="payout-screen" class="p-6">
                <!-- Header -->
                <div id="payout-header" class="flex items-center mb-8">
                    @if (FromRegisterDriver)
                    {
                        <button class="text-gray-600" @onclick="NavigateBackToRegisterDriver">
                            <i class="fa-solid fa-arrow-left text-xl"></i>
                        </button>
                    }
                    else
                    {
                        <span style="width:40px;display:inline-block;"></span>
                    }
                    <div class="text-center flex-1 mr-8">
                        <h2 class="text-xl font-semibold">Payout Accounts</h2>
                        <p class="text-sm text-gray-600 mt-1">Manage how you receive earnings from your deliveries</p>
                    </div>
                </div>

                <!-- Progress spinner overlay -->
                @if (IsLoading || IsReferenceDataLoading)
                {
                    <div class="absolute inset-0 z-40 bg-white bg-opacity-70 flex flex-col items-center justify-center">
                        <span class="text-orange-500 text-lg font-semibold mb-2">Loading payout data...</span>
                        <span class="animate-spin text-3xl text-orange-500"><i class="fa fa-spinner"></i></span>
                    </div>
                }

                <!-- Empty State -->
                @if (!ExistingPayoutAccounts.Any() && !IsLoading)
                {
                    <div id="empty-state" class="text-center py-6">
                        <div class="w-16 h-16 mx-auto mb-4 text-gray-300">
                            <i class="fa-solid fa-wallet text-4xl"></i>
                        </div>
                        <h3 class="text-base font-medium mb-1">No Payout Accounts Yet</h3>
                        <p class="text-sm text-gray-600 mb-4">Add your first payout method to start receiving earnings</p>
                    </div>
                }

                <!-- Payout Account Cards -->
                <div id="payout-accounts-list"
                     class="overflow-y-scroll space-y-1 mb-8 scrollbar-thin scrollbar-thumb-gray-400 scrollbar-track-gray-100"
                     style="max-height: 285px;">
                @foreach (var account in ExistingPayoutAccounts)
                {
                    // Find the payment method display name
                    var paymentMethodName = AvailablePayoutOptions.FirstOrDefault(x => x.Id == account.PaymentMethodTypeId)?.Name ?? "Payout Method";
                    <div class="bg-white rounded-lg p-3 border">
                        <div class="flex justify-between items-center mb-2">
                            <div class="flex items-center space-x-2">
                                <i class="@GetPayoutIcon(paymentMethodName) text-lg"></i>
                                <span class="font-medium text-sm">@paymentMethodName</span>
                            </div>
                            @if (account.IsDefault)
                            {
                                <span class="px-2 py-0.5 bg-green-100 text-green-700 text-xs rounded-full">Active</span>
                            }
                        </div>
                        <div class="flex justify-between items-center">
                            <p class="text-xs text-gray-500">@account.AccountNumberLast4</p> @* You can adjust this for a custom description *@
                            <div class="flex items-center space-x-2">
                                <button class="text-gray-400 hover:text-gray-600" @onclick="() => EditPayoutAccount(account.Id)">
                                    <i class="fa-solid fa-pen-to-square text-sm"></i>
                                </button>
                                <button class="text-gray-400 hover:text-red-600" @onclick="() => ConfirmDelete(account.Id)">
                                    <i class="fa-solid fa-trash text-sm"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                }

                </div>

                <!-- Payment Method Selector -->
                <div class="mb-6">
                    <div class="text-center mb-4">
                        <h2 class="text-lg font-medium text-gray-800">Add a Payout Account</h2>
                        <h3 class="text-sm text-gray-600">Select a payout option to continue</h3>
                    </div>

                    @if (IsReferenceDataLoading)
                    {
                        <p class="text-sm text-gray-400 text-center">Loading payout types...</p>
                    }
                    else if (!AvailablePayoutOptions.Any())
                    {
                        <p class="text-sm text-red-500 text-center">No payout options available. Please try again later.</p>
                    }
                    else
                    {
                        <div class="grid grid-cols-2 gap-3">
                            @foreach (var method in AvailablePayoutOptions)
                            {
                                <div class="@GetPaymentOptionClass(method.Name)"
                                        @onclick="() => StartAddPayoutAccount(method.Name)">
                                    <i class="@GetPayoutIcon(method.Name) text-2xl mb-2"></i>
                                    <p class="text-sm font-medium">@method.Name</p>
                                </div>
                            }
                        </div>
                    }
                </div>

                <!-- BottomSheets for error/validation feedback -->
                @if (!string.IsNullOrEmpty(ActiveBottomSheet))
                {
                    @switch (ActiveBottomSheet)
                    {
                        case "generic_error":
                            <GenericErrorBottomSheet 
                                Message="@ErrorMessage" 
                                OnDismiss="HandleGenericErrorDismiss" />
                            break;
                        case "validation_failed":
                            <ValidationFailedBottomSheet 
                                ValidationErrors="@ValidationErrors" 
                                OnDismiss="@(() => ActiveBottomSheet = null)" />
                            break;
                        case "referential_integrity":
                            <ReferentialIntegrityBottomSheet
                                ErrorCode="@ReferentialIntegrityBottomSheetErrorCode"
                                Message="@ReferentialIntegrityBottomSheetMessage"
                                OnDismiss="@(() => ActiveBottomSheet = null)" />
                            break;
                    }
                }
            </div>

            <!-- Add/Edit Bottom Sheet -->
            <div class="fixed inset-x-0 bottom-0 transition-transform duration-300 ease-in-out z-50"
                 style="@(ShowAddSheet ? "transform: translateY(0);" : "transform: translateY(100%);")">
                <div class="bg-white rounded-t-2xl p-6 max-h-[90vh] overflow-y-auto">
                    <div class="flex justify-between items-center mb-6">
                        <h3 class="text-lg font-semibold">
                            @(IsEditMode ? $"Edit {SelectedPayoutTypeName}" : $"Add {SelectedPayoutTypeName}")
                        </h3>
                        <button class="text-gray-400" @onclick="ToggleAddSheet">
                            <i class="fa-solid fa-xmark text-xl"></i>
                        </button>
                    </div>
                    @RenderSelectedPayoutForm()
                </div>
            </div>

            <!-- Delete Confirmation Bottom Sheet -->
            <div class="fixed inset-x-0 bottom-0 transition-transform duration-300 ease-in-out z-50"
                 style="@($"transform: translateY({(ShowDeleteSheet ? "0" : "100%")});")">
                <div class="bg-white rounded-t-2xl p-6">
                    <div class="text-center mb-6">
                        <div class="w-12 h-12 mx-auto mb-4 text-red-500">
                            <i class="fa-solid fa-triangle-exclamation text-4xl"></i>
                        </div>
                        <h3 class="text-lg font-semibold mb-2">Delete this payout account?</h3>
                        <p class="text-sm text-gray-600">@PayoutAccountToDeleteDescription</p>
                    </div>
                    <div class="space-y-3">
                        <button class="w-full py-3 bg-red-600 text-white rounded-lg font-medium"
                                @onclick="DeletePayoutAccountAsync">
                            Confirm Delete
                        </button>
                        <button class="w-full py-3 bg-gray-100 text-gray-600 rounded-lg font-medium"
                                @onclick="ToggleDeleteSheet">
                            Cancel
                        </button>
                    </div>
                </div>
            </div>

        </div>
    </div>
</CenterWrapper>

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public bool FromRegisterDriver { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public Guid? PayoutAccountId { get; set; }

    [Inject] private IAuthSessionContext AuthSession { get; set; }

    private Guid UserId => AuthSession.UserId ?? Guid.Empty;

    private List<PayoutAccountRequest> ExistingPayoutAccounts = new();
    private List<PaymentMethodType> AvailablePayoutOptions = new();
    private List<Bank> AvailableBanks = new();
    private List<Country> AvailableCountries = new();
    private string? SelectedCountryCode = "CR";
    private string? SelectedPayoutTypeName;
    private Guid EditingPayoutAccountId;
    private bool ShowAddSheet = false;
    private bool ShowDeleteSheet = false;
    private bool IsEditMode = false;
    private bool IsLoading = false;
    private bool IsReferenceDataLoading = true;
    private PayoutAccountFormModel CurrentPayoutAccount { get; set; } = new();

    // Delete info
    private Guid PayoutAccountToDeleteId;
    private string PayoutAccountToDeleteDescription = "";

    // Error/Feedback
    private string ErrorMessage { get; set; } = string.Empty;
    private string? ActiveBottomSheet { get; set; } = null;
    private List<string> ValidationErrors { get; set; } = new();
    private string? ReferentialIntegrityBottomSheetErrorCode { get; set; }
    private string? ReferentialIntegrityBottomSheetMessage { get; set; }
    private bool IsReferentialIntegrityBottomSheetVisible { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        await LoadReferenceDataAsync();

        if (PayoutAccountId.HasValue && PayoutAccountId.Value != Guid.Empty)
        {
            IsEditMode = true;
            EditingPayoutAccountId = PayoutAccountId.Value;

            if (FromRegisterDriver)
            {
                DriverRegistrationData? savedData = await LocalStorage.GetItemAsync<DriverRegistrationData>("driver_registration_form");
                // Now acc is a PayoutAccountRequest!
                PayoutAccountRequest? acc = savedData?.PayoutAccounts?.FirstOrDefault(p => p.PaymentMethodTypeId == EditingPayoutAccountId);
                // ↑ If you want to match on another property, adjust here (e.g. if you add an Id to PayoutAccountRequest)
                if (acc != null)
                {
                    CurrentPayoutAccount = acc.ToPayoutAccountFormModel(); // Use your extension!
                    SelectedPayoutTypeName = AvailablePayoutOptions.FirstOrDefault(x => x.Id == acc.PaymentMethodTypeId)?.Name ?? ""; // Find name from options
                    ShowAddSheet = true;
                }
            }
            else
            {
                PayoutAccountResponse? response = await PayoutAccountService.GetPayoutAccountByIdAsync(EditingPayoutAccountId);
                PayoutAccountRequest? acc = response?.PayoutAccount;
                if (acc != null)
                {
                    CurrentPayoutAccount = acc.ToPayoutAccountFormModel(); // Use your extension!
                    SelectedPayoutTypeName = AvailablePayoutOptions.FirstOrDefault(x => x.Id == acc.PaymentMethodTypeId)?.Name ?? "";
                    ShowAddSheet = true;
                }

            }
        }

        await LoadPayoutAccountsAsync();
        IsLoading = false;
    }

    private async Task LoadReferenceDataAsync()
    {
        IsReferenceDataLoading = true;
        try
        {
            var refData = await PayoutAccountService.GetPayoutPageReferenceDataAsync(SelectedCountryCode ?? "CR");
            AvailablePayoutOptions = refData.PayoutMethodTypes;
            AvailableBanks = refData.Banks;
            AvailableCountries = refData.Countries;
        }
        catch (Exception ex)
        {
            ShowGenericError($"Failed to load reference data: {ex.Message}");
        }
        finally
        {
            IsReferenceDataLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadPayoutAccountsAsync()
    {
        if (FromRegisterDriver)
        {
            DriverRegistrationData? savedData = await LocalStorage.GetItemAsync<DriverRegistrationData>("driver_registration_form");
            ExistingPayoutAccounts = savedData?.PayoutAccounts?.ToList() ?? new();
        }
        else
        {
            // API returns List<PayoutAccountResponse>
            List<PayoutAccountResponse> apiList = await PayoutAccountService.GetPayoutAccountsByUserIdAsync(UserId);
            ExistingPayoutAccounts = apiList
                .Where(r => r.PayoutAccount != null)
                .Select(r => r.PayoutAccount!)
                .ToList();
        }
    }



    private void StartAddPayoutAccount(string typeName)
    {
        SelectedPayoutTypeName = typeName;
        IsEditMode = false;
        ShowAddSheet = true;
        CurrentPayoutAccount = new PayoutAccountFormModel
        {
            PaymentMethodTypeId = AvailablePayoutOptions.FirstOrDefault(x => x.Name == typeName)?.Id ?? Guid.Empty,
            IsDefault = !ExistingPayoutAccounts.Any()
        };
    }

    private async void EditPayoutAccount(Guid payoutAccountId)
    {
        IsEditMode = true;
        EditingPayoutAccountId = payoutAccountId;

        if (FromRegisterDriver)
        {
            DriverRegistrationData? savedData = await LocalStorage.GetItemAsync<DriverRegistrationData>("driver_registration_form");
            // PayoutAccountRequest is the type stored in registration
            PayoutAccountRequest? acc = savedData?.PayoutAccounts?.FirstOrDefault(p => p.Id == payoutAccountId);
            if (acc != null)
            {
                CurrentPayoutAccount = acc.ToPayoutAccountFormModel(); // Use your extension method!
                SelectedPayoutTypeName = AvailablePayoutOptions.FirstOrDefault(x => x.Id == acc.PaymentMethodTypeId)?.Name ?? "";
                ShowAddSheet = true;
            }
        }
        else
        {
            PayoutAccountResponse? response = await PayoutAccountService.GetPayoutAccountByIdAsync(payoutAccountId);
            PayoutAccountRequest? acc = response?.PayoutAccount;
            if (acc != null)
            {
                CurrentPayoutAccount = acc.ToPayoutAccountFormModel();
                SelectedPayoutTypeName = AvailablePayoutOptions.FirstOrDefault(x => x.Id == acc.PaymentMethodTypeId)?.Name ?? "";
                ShowAddSheet = true;
            }

        }
        StateHasChanged();
    }

    private void ConfirmDelete(Guid payoutAccountId)
    {
        var acc = ExistingPayoutAccounts.FirstOrDefault(a => a.Id == payoutAccountId);

        // Get payment method name from options
        string methodName = acc != null
            ? (AvailablePayoutOptions.FirstOrDefault(x => x.Id == acc.PaymentMethodTypeId)?.Name ?? "Payout method")
            : "";

        string last4 = !string.IsNullOrEmpty(acc?.AccountNumberLast4) ? $"account-number# {acc.AccountNumberLast4}" : "";

        PayoutAccountToDeleteId = payoutAccountId;
        PayoutAccountToDeleteDescription = $"Delete {methodName} {last4}".Trim();
        ShowDeleteSheet = true;
    }


    private void ToggleAddSheet()
    {
        ShowAddSheet = !ShowAddSheet;
        if (!ShowAddSheet)
        {
            SelectedPayoutTypeName = null;
        }
    }

    private void ToggleDeleteSheet() => ShowDeleteSheet = !ShowDeleteSheet;

    private void NavigateBackToRegisterDriver()
    {
        NavigationManager.NavigateTo("/registerdriver");
    }

    private string GetPayoutIcon(string typeName) => typeName switch
    {
        "BankAccount" or "Bank" => "fa-solid fa-building-columns text-gray-600",
        "SINPE" => "fa-solid fa-mobile-screen text-green-600",
        "PayPal" => "fa-brands fa-paypal text-[#003087]",
        _ => "fa-solid fa-wallet text-gray-500"
    };

    private string GetPaymentOptionClass(string typeName)
    {
        var baseClass = "border rounded-lg p-4 cursor-pointer hover:border-orange-500";
        return SelectedPayoutTypeName == typeName
        ? $"{baseClass} border-2 border-orange-500 bg-orange-50"
        : $"{baseClass} border-gray-300";
    }

    private async Task SavePayoutAccountAsync()
    {
        CurrentPayoutAccount.BuildMetadataJson();

        if (FromRegisterDriver)
        {
            string storageKey = "driver_registration_form";
            DriverRegistrationData savedData = await LocalStorage.GetItemAsync<DriverRegistrationData>(storageKey) ?? new DriverRegistrationData();

            // Convert form to request DTO for storage
            PayoutAccountRequest req = CurrentPayoutAccount.ToPayoutAccountRequest();

            // If this is an edit, replace; else, add
            int idx = savedData.PayoutAccounts?.FindIndex(p => p.PaymentMethodTypeId == req.PaymentMethodTypeId) ?? -1;
            if (idx >= 0)
                savedData.PayoutAccounts[idx] = req;
            else
                (savedData.PayoutAccounts ??= new()).Add(req);

            await LocalStorage.SetItemAsync(storageKey, savedData);
            ShowAddSheet = false;
            await LoadPayoutAccountsAsync();
            NavigationManager.NavigateTo("/registerdriver");
        }
        else
        {
            try
            {
                IsLoading = true;
                PayoutAccountRequest req = CurrentPayoutAccount.ToPayoutAccountRequest();

                if (IsEditMode)
                {
                    await PayoutAccountService.UpdatePayoutAccountAsync(UserId, EditingPayoutAccountId, req);
                }
                else
                {
                    await PayoutAccountService.AddPayoutAccountAsync(UserId, req);
                }
                ShowAddSheet = false;
                await LoadPayoutAccountsAsync();
            }
            catch (PayoutAccountClientValidationException vex)
            {
                ShowValidationFailed(vex.ValidationMessages);
            }
            catch (ReferentialIntegrityClientException rex)
            {
                ShowReferentialIntegrityBottomSheet(rex.ErrorCode, rex.Message);
            }
            catch (PayoutAccountClientException cex)
            {
                ShowGenericError($"{cex.Message} (Code: {cex.Code})");
            }
            catch (HttpRequestException hrex)
            {
                ShowGenericError("Server communication failed. Please try again.");
            }
            catch (Exception ex)
            {
                ShowGenericError("Unexpected error: " + ex.Message);
            }
            finally
            {
                IsLoading = false;
            }
        }
    }

    private async Task DeletePayoutAccountAsync()
    {
        if (FromRegisterDriver)
        {
            var storageKey = "driver_registration_form";
            var savedData = await LocalStorage.GetItemAsync<DriverRegistrationData>(storageKey);
            if (savedData != null)
            {
                savedData.PayoutAccounts?.RemoveAll(p => p.Id == PayoutAccountToDeleteId);
                await LocalStorage.SetItemAsync(storageKey, savedData);
                ShowDeleteSheet = false;
                await LoadPayoutAccountsAsync();
            }
        }
        else
        {
            await PayoutAccountService.DeletePayoutAccountAsync(UserId, PayoutAccountToDeleteId);
            ShowDeleteSheet = false;
            await LoadPayoutAccountsAsync();
        }
    }

    private void ShowGenericError(string message)
    {
        ErrorMessage = message;
        ActiveBottomSheet = "generic_error";
    }

    private void ShowValidationFailed(List<string> errors)
    {
        ValidationErrors = errors;
        ActiveBottomSheet = "validation_failed";
    }

    private void ShowReferentialIntegrityBottomSheet(string code, string message)
    {
        ActiveBottomSheet = "referential_integrity";
        ReferentialIntegrityBottomSheetErrorCode = code;
        ReferentialIntegrityBottomSheetMessage = message;
        IsReferentialIntegrityBottomSheetVisible = true;
    }

    private void HandleGenericErrorDismiss()
    {
        ActiveBottomSheet = null;
    }

    private RenderFragment RenderSelectedPayoutForm() => SelectedPayoutTypeName switch
    {
        "Bank" or "BankAccount" => RenderBankAccountForm,
        "SINPE" => RenderSinpeForm,
        "PayPal" => RenderPayPalForm,
        _ => RenderGenericPayoutForm
    };

    private RenderFragment RenderBankAccountForm => @<div>
        <!-- Refined Bank Account Bottom Sheet -->
        <div id="bank-account-form" class="space-y-6">
            <!-- Intro Block -->
            <div class="bg-gray-50 p-4 rounded-lg border border-gray-200 mb-4">
                <div class="flex items-center space-x-3">
                    <i class="fa-solid fa-building-columns text-2xl text-gray-600"></i>
                    <div>
                        <p class="text-sm font-medium text-gray-700">Bank Account Details</p>
                        <p class="text-xs text-gray-500">Secure your payout via a verified local bank</p>
                    </div>
                </div>
            </div>

            <!-- Form Fields -->
            <div class="space-y-4">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Account Holder Name</label>
                    <input type="text" class="w-full px-4 py-3 border border-gray-300 rounded-lg"
                           placeholder="Enter full name" @bind="CurrentPayoutAccount.FullName" />
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Bank Name</label>
                    <select class="w-full px-4 py-3 border border-gray-300 rounded-lg" @bind="CurrentPayoutAccount.BankId">
                        <option value="">Select your bank</option>
                        @foreach (var bank in AvailableBanks)
                        {
                            <option value="@bank.Id">@bank.Name</option>
                        }
                    </select>
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Account Number</label>
                    <input type="text" class="w-full px-4 py-3 border border-gray-300 rounded-lg"
                           placeholder="Enter account number" @bind="CurrentPayoutAccount.AccountNumber" />
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Confirm Account Number</label>
                    <input type="text" class="w-full px-4 py-3 border border-gray-300 rounded-lg"
                           placeholder="Re-enter account number" @bind="CurrentPayoutAccount.ConfirmAccountNumber" />
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Routing Number <span class="text-xs text-gray-400">(Optional)</span></label>
                    <input type="text" class="w-full px-4 py-3 border border-gray-300 rounded-lg"
                           placeholder="Enter routing number" @bind="CurrentPayoutAccount.RoutingNumber" />
                </div>
            </div>

            <!-- Save Action -->
            <div class="pt-4">
                <button class="w-full bg-orange-500 text-white py-3 rounded-lg font-medium hover:bg-orange-600"
                        @onclick="SavePayoutAccountAsync">
                    @(IsEditMode ? $"Update Bank Account" : $"Save Bank Account")
                </button>
            </div>
        </div>
    </div>;

    private RenderFragment RenderSinpeForm => @<div>
        <!-- SINPE Account Form -->
        <div id="sinpe-form" class="space-y-4">
            <div class="space-y-2">
                <label class="block text-sm font-medium text-gray-700">Full Name</label>
                <input type="text" required class="w-full px-4 py-3 rounded-lg border border-gray-300" placeholder="Enter full name" @bind="CurrentPayoutAccount.FullName">
            </div>

            <div class="space-y-2">
                <label class="block text-sm font-medium text-gray-700">Mobile Number</label>
                <input type="tel" required pattern="[0-9]{8}" class="w-full px-4 py-3 rounded-lg border border-gray-300" placeholder="Enter 8-digit SINPE mobile number" @bind="CurrentPayoutAccount.MobileNumber">
            </div>

            <div class="space-y-2">
                <label class="block text-sm font-medium text-gray-700">Bank Name (Optional)</label>
                <select class="w-full px-4 py-3 rounded-lg border border-gray-300" @bind="CurrentPayoutAccount.BankId">
                    <option value="">Select your bank</option>
                    @foreach (var bank in AvailableBanks)
                    {
                        <option value="@bank.Id">@bank.Name</option>
                    }
                </select>
            </div>

            <!-- Save Button -->
            <div class="pt-4">
                <button class="w-full bg-orange-500 text-white py-3 rounded-lg font-medium hover:bg-orange-600"
                        @onclick="SavePayoutAccountAsync">
                    @(IsEditMode ? $"Update {SelectedPayoutTypeName}" : $"Save {SelectedPayoutTypeName}")
                </button>
            </div>

        </div>
    </div>;

    private RenderFragment RenderPayPalForm => @<div>
        <!-- PAYPAL Account Form -->
        <div id="paypal-form" class="space-y-4">
            <div class="space-y-2">
                <label class="block text-sm font-medium text-gray-700">Full Name</label>
                <input type="text" required class="w-full px-4 py-3 rounded-lg border border-gray-300" placeholder="Enter full name" @bind="CurrentPayoutAccount.FullName">
            </div>

            <div class="space-y-2">
                <label class="block text-sm font-medium text-gray-700">PayPal Email</label>
                <input type="email" id="paypalEmail" required class="w-full px-4 py-3 rounded-lg border border-gray-300" placeholder="Enter PayPal email" @bind="CurrentPayoutAccount.PayPalEmail">
            </div>

            <div class="space-y-2">
                <label class="block text-sm font-medium text-gray-700">Confirm PayPal Email</label>
                <input type="email" id="confirmPaypalEmail" required class="w-full px-4 py-3 rounded-lg border border-gray-300" placeholder="Confirm PayPal email" @bind="CurrentPayoutAccount.ConfirmPayPalEmail">
            </div>

            <!-- Save Button -->
            <div class="pt-4">
                <button class="w-full bg-orange-500 text-white py-3 rounded-lg font-medium hover:bg-orange-600"
                        @onclick="SavePayoutAccountAsync">
                    @(IsEditMode ? $"Update {SelectedPayoutTypeName}" : $"Save {SelectedPayoutTypeName}")
                </button>
            </div>

        </div>
    </div>;

    private RenderFragment RenderGenericPayoutForm => @<div>
        <p>Generic Form Placeholder</p>
    </div>;
}

    
