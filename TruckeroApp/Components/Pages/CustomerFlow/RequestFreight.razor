@* @page "/requestfreight" *@
@page "/"
@using System.ComponentModel.DataAnnotations

@inject IViewProviderApiClientService ViewProviderApiClientService

<CenterWrapper>
    <div id="request-freight-screen" class="bg-white min-h-screen">
        <!-- Header -->
        <div id="header" class="bg-white px-4 py-3 shadow-sm sticky top-0 z-10">
            <div class="flex items-center">
                <button class="mr-3" @onclick="NavigateBack">
                    <i class="fa-solid fa-arrow-left text-gray-600 text-lg"></i>
                </button>
                <h1 class="text-xl font-semibold text-center flex-1">Request Freight</h1>
            </div>
        </div>

        <div id="content" class="px-4 pb-32">
            <!-- Locations -->
            <div id="location-section" class="py-6">
                <h2 class="text-lg font-semibold mb-4">Where to?</h2>
                <div class="space-y-3">
                    <div class="relative">
                        <div class="absolute left-3 top-1/2 transform -translate-y-1/2">
                            <i class="fa-solid fa-circle text-orange-500 text-xs"></i>
                        </div>
                        <input type="text"
                               placeholder="Pickup location"
                               class="w-full pl-10 pr-4 py-4 bg-gray-50 rounded-xl border-0 focus:ring-2 focus:ring-orange-500 focus:outline-none"
                               @bind="PickupLocation" />
                        <button class="absolute right-3 top-1/2 transform -translate-y-1/2" @onclick="SetPickupToCurrentLocation">
                            <i class="fa-solid fa-location-crosshairs text-gray-400"></i>
                        </button>
                    </div>
                    <div class="relative">
                        <div class="absolute left-3 top-1/2 transform -translate-y-1/2">
                            <i class="fa-solid fa-square text-orange-500 text-xs"></i>
                        </div>
                        <input type="text"
                               placeholder="Delivery location"
                               class="w-full pl-10 pr-4 py-4 bg-gray-50 rounded-xl border-0 focus:ring-2 focus:ring-orange-500 focus:outline-none"
                               @bind="DeliveryLocation" />
                    </div>
                </div>
            </div>

            <!-- Contained Tabs Card -->
            <div class="bg-gray-50 shadow-md p-3">
                <!-- Tab Buttons Row -->
                <div id="tab-menu" class="flex bg-gray-100 p-1 mb-0">
                    @foreach (var tab in Tabs)
                    {
                        <button class="tab-btn flex-1 flex items-center justify-center space-x-2 py-3 px-4 transition-colors
                                        @GetTabClass(tab)"
                                @onclick="() => ActiveTab = tab">
                            <i class="@tab.Icon text-sm"></i>
                            <span class="text-sm">@tab.Title</span>
                        </button>
                    }
            
                </div>

                <!-- Tab Content Area -->
                <div class="pt-5 pb-2 px-1">
                    @if (ActiveTab.Name == "vehicle")
                    {
                        <div class="grid grid-cols-2 gap-4">
                            @foreach (var t in TruckTypes)
                            {
                                <div class="@GetTruckTypeClass(t)"
                                     @onclick="() => SelectTruckType(t)">
                                    <i class="fa-solid fa-truck text-2xl mb-2 @(SelectedTruckType == t ? "text-orange-500" : "text-gray-600")"></i>
                                    <p class="font-bold text-base">@t.Name</p>
                                    <!-- Optionally, add description if you add a Description property to TruckType -->
                                </div>
                            }
                        </div>
                    }
                    else if (ActiveTab.Name == "payload")
                    {
                        <div class="grid grid-cols-2 gap-4">
                            @foreach (var tag in UseTags)
                            {
                                <div class="@GetUseTagClass(tag)"
                                     @onclick="() => SelectUseTag(tag)">
                                    <i class="fa-solid fa-boxes-stacked text-xl mb-2 @(SelectedUseTag == tag ? "text-orange-500" : "text-gray-600")"></i>
                                    <p class="font-bold text-base">@tag.Name</p>
                                </div>
                            }
                        </div>
                        @if (SelectedUseTag?.Name == "Other")
                        {
                            <div class="mt-4">
                                <label class="block text-sm font-medium mb-2">Please specify</label>
                                <input type="text" placeholder="Enter payload type..."
                                       class="w-full px-4 py-3 bg-white rounded-xl border-0 focus:ring-2 focus:ring-orange-500 focus:outline-none"
                                       @bind="OtherPayload" />
                            </div>
                        }
                    }
                    else if (ActiveTab.Name == "help")
                    {
                        <div class="grid grid-cols-2 gap-4">
                            @foreach (var h in HelpOptions)
                            {
                                <div class="@GetHelpClass(h)"
                                     @onclick="() => ToggleHelpOption(h)">
                                    <i class="fa-solid fa-people-carry-box text-2xl mb-2 text-gray-600"></i>
                                    <p class="font-bold text-base">@h.Name</p>
                                </div>
                            }
                        </div>
                    }
                </div>


            <!-- Travel With Payload -->
            <div id="travel-option-section" class="py-6 border-t border-gray-100">
                <div class="flex items-center justify-between mb-4">
                    <div>
                        <h2 class="text-lg font-semibold">Travel with payload</h2>
                        <p class="text-sm text-gray-500">Accompany your items during transport</p>
                    </div>
                    <label class="relative inline-flex items-center cursor-pointer">
                        <input type="checkbox" class="sr-only" @bind="TravelWithPayload" />
                        <div class="w-11 h-6 bg-gray-200 rounded-full peer-checked:bg-orange-500"></div>
                    </label>
                </div>

                @if (TravelWithPayload)
                {
                    <div class="space-y-3">
                        <div class="flex items-center space-x-3">
                            <input type="radio" name="travel-requirement" id="travel-optional"
                                    class="text-orange-500 focus:ring-orange-500"
                                    @bind="TravelRequirement" />
                            <label for="travel-optional" class="text-sm">Optional - I can travel if needed</label>
                        </div>
                        <div class="flex items-center space-x-3">
                            <input type="radio" name="travel-requirement" id="travel-required"
                                    class="text-orange-500 focus:ring-orange-500"
                                    @bind="TravelRequirement" />
                            <label for="travel-required" class="text-sm">Required - I must travel with my items</label>
                        </div>
                    </div>
                }

            </div>

            <!-- Insurance -->
            <div id="insurance-section" class="py-6 border-t border-gray-100">
                <div class="flex items-center justify-between">
                    <div>
                        <h2 class="text-lg font-semibold">Insurance</h2>
                        <p class="text-sm text-gray-500">Protect your items during transport</p>
                    </div>
                    <label class="relative inline-flex items-center cursor-pointer">
                        <input type="checkbox" class="sr-only" @bind="Insurance" />
                        <div class="w-11 h-6 bg-gray-200 rounded-full peer-checked:bg-orange-500"></div>
                    </label>
                </div>
            </div>

            <!-- Additional Details -->
            <div id="additional-details" class="py-6 border-t border-gray-100">
                <h2 class="text-lg font-semibold mb-4">Additional Details</h2>
                <div class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium mb-2">Weight (optional)</label>
                        <input type="text" placeholder="Approximate weight" class="w-full px-4 py-3 bg-gray-50 rounded-xl border-0 focus:ring-2 focus:ring-orange-500 focus:outline-none"
                               @bind="Weight" />
                    </div>
                    <div>
                        <label class="block text-sm font-medium mb-2">Special Instructions</label>
                        <textarea placeholder="Any special handling requirements..." rows="3" class="w-full px-4 py-3 bg-gray-50 rounded-xl border-0 focus:ring-2 focus:ring-orange-500 focus:outline-none resize-none"
                                  @bind="SpecialInstructions"></textarea>
                    </div>
                </div>
            </div>
        </div>

        <!-- Bottom Actions (sticky footer) -->
        <div id="bottom-actions" class="fixed bottom-0 left-0 right-0 bg-white border-t border-gray-100 px-4 py-4">
            <div class="space-y-3">
                <div class="flex items-center justify-between text-sm text-gray-600">
                    <span>Estimated cost</span>
                    <span class="font-semibold text-lg text-gray-800">@EstimatedCostText</span>
                </div>
                <!-- Payment Method carousel/slider here (future step, you can add a component) -->
                <button id="request-freight-btn"
                        class="w-full py-4 px-6 bg-orange-500 text-white rounded-xl font-semibold hover:bg-orange-600 transition-colors"
                        @onclick="RequestFreightAsync">
                    Request Freight
                </button>
            </div>
        </div>
    </div>
    </div>
</CenterWrapper>

@code {
    // --- State for all form fields ---
    private string PickupLocation { get; set; } = "";
    private string DeliveryLocation { get; set; } = "";

    // NEW: Reference-entity-driven option selections
    private TruckType? SelectedTruckType { get; set; }
    private UseTag? SelectedUseTag { get; set; }
    private string? OtherPayload { get; set; }
    private HashSet<Guid> SelectedHelpOptionIds { get; set; } = new();

    private bool TravelWithPayload { get; set; }
    private string TravelRequirement { get; set; } = "optional";
    private bool Insurance { get; set; }
    private string? Weight { get; set; }
    private string? SpecialInstructions { get; set; }
    private string EstimatedCostText { get; set; } = "$45 - $65"; // Placeholder

    // --- Reference Data ---
    private List<TruckType> TruckTypes { get; set; } = new();
    private List<UseTag> UseTags { get; set; } = new();
    private List<HelpOption> HelpOptions { get; set; } = new();

    // --- Tab Definitions ---
    private class TabDef { public string Name { get; set; } = ""; public string Title { get; set; } = ""; public string Icon { get; set; } = ""; }
    private TabDef[] Tabs = new[] {
        new TabDef { Name = "vehicle", Title = "Vehicle", Icon = "fa-solid fa-truck" },
        new TabDef { Name = "payload", Title = "Payload", Icon = "fa-solid fa-boxes-stacked" },
        new TabDef { Name = "help", Title = "Help", Icon = "fa-solid fa-people-carry-box" }
    };
    private TabDef ActiveTab { get; set; }

    // --- Lifecycle ---
    protected override async Task OnInitializedAsync()
    {
        ActiveTab = Tabs[0];

        // LOAD YOUR REFERENCE DATA FROM API!
        try
        {
            // You'll need to inject IViewProviderApiClientService and call your endpoint here:
            // Example (update to match your actual API/service client):
            var referenceData = await ViewProviderApiClientService.GetFreightBidReferenceDataAsync();

            TruckTypes = referenceData?.TruckTypes ?? new();
            UseTags = referenceData?.UseTags ?? new();
            HelpOptions = referenceData?.HelpOptions ?? new();
        }
        catch (Exception ex)
        {
            // TODO: Show error to user if loading fails
        }
    }

    // --- Tab and Option Selection Logic ---
    private string GetTabClass(TabDef tab) =>
        tab == ActiveTab
            ? "bg-white shadow-sm text-orange-500 font-medium"
            : "text-gray-600";

    // --- TruckType (Vehicle) ---
    private void SelectTruckType(TruckType t) => SelectedTruckType = t;
    private string GetTruckTypeClass(TruckType t) =>
        $"p-4 text-center border-2 shadow-sm transition-colors cursor-pointer " +
        (SelectedTruckType == t ? "border-orange-500 bg-orange-50" : "border-transparent bg-gray-50 hover:border-orange-500");

    // --- UseTag (Payload) ---
    private void SelectUseTag(UseTag tag)
    {
        SelectedUseTag = tag;
        if (tag.Name != "Other")
            OtherPayload = null;
    }
    private string GetUseTagClass(UseTag tag) =>
        $"p-4 text-center border-2 shadow-sm transition-colors cursor-pointer " +
        (SelectedUseTag == tag ? "border-orange-500 bg-orange-50" : "border-transparent bg-gray-50 hover:border-orange-500");

    // --- HelpOptions ---
    private void ToggleHelpOption(HelpOption h)
    {
        if (!SelectedHelpOptionIds.Add(h.Id))
            SelectedHelpOptionIds.Remove(h.Id);
    }
    private string GetHelpClass(HelpOption h) =>
        $"p-4 text-center border-2 shadow-sm transition-colors cursor-pointer " +
        (SelectedHelpOptionIds.Contains(h.Id) ? "border-orange-500 bg-orange-50" : "border-transparent bg-gray-50 hover:border-orange-500");

    // --- Actions ---
    private void NavigateBack()
    {
        // TODO: Navigation logic, e.g., NavigationManager.NavigateTo(...)
    }

    private void SetPickupToCurrentLocation()
    {
        // TODO: Geolocation integration
        PickupLocation = "Current Location (stub)";
    }

    private async Task RequestFreightAsync()
    {
        // TODO: Call backend API with all selected/form data, show bottomsheet on success/failure
    }
}
