@using Microsoft.AspNetCore.Components
@using Truckero.Core.Interfaces.Services

@inject NavigationManager NavigationManager
@inject IOnboardingService OnboardingService

<div class="fixed inset-0 z-50 flex items-end justify-center bg-black bg-opacity-50">
    <div class="w-full sm:max-w-md bg-white rounded-t-2xl p-6 shadow-lg animate-slide-up">
        <div class="text-center">
            <i class="fa-solid fa-envelope-circle-check text-4xl text-green-600 mb-3"></i>
            <h3 class="text-lg font-semibold text-gray-800 mb-2">Check Your Inbox</h3>
            <p class="text-sm text-gray-600 mb-4">
                We’ve sent a confirmation email to <strong>@Email</strong>.<br />
                Please verify your address to activate your account.
            </p>

            <div class="flex flex-col items-center gap-3 mt-4">
                <button class="w-full px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
                        @onclick="ResendEmail" disabled="@IsCooldownActive">
                    @if (IsCooldownActive)
                    {
                        <span>Resend Email (wait...)</span>
                    }
                    else
                    {
                        <span>Resend Email</span>
                    }
                </button>

                <button class="w-full px-4 py-2 bg-gray-800 text-white rounded-lg hover:bg-gray-900"
                        @onclick="NavigateToLogin">
                    Go to Login
                </button>

                <button class="w-full px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200"
                        @onclick="CloseApp">
                    Close App
                </button>
            </div>

            @if (!string.IsNullOrWhiteSpace(StatusMessage))
            {
                <div class="text-sm @(StatusSuccess ? "text-green-600" : "text-red-600") mt-2">@StatusMessage</div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public string Email { get; set; } = string.Empty;
    [Parameter] public Guid RegisteredUserId { get; set; }

    private string StatusMessage = string.Empty;
    private bool StatusSuccess = true;
    private bool IsCooldownActive = false;

    private async Task ResendEmail()
    {
        StatusMessage = string.Empty;
        StatusSuccess = true;
        IsCooldownActive = true;

        try
        {
            var result = await OnboardingService.SendConfirmationEmailAsync(RegisteredUserId);
            StatusSuccess = result.Success;
            StatusMessage = result.Success
                ? "Confirmation email resent successfully."
                : result.Message ?? "Failed to resend email.";
        }
        catch (Exception ex)
        {
            StatusSuccess = false;
            StatusMessage = $"Error: {ex.Message}";
        }

        await Task.Delay(30000); // 30 second cooldown
        IsCooldownActive = false;
        StateHasChanged();
    }

    private void NavigateToLogin()
    {
        NavigationManager.NavigateTo(AppRoutes.StartupRouter);
    }

    private void CloseApp()
    {
        // Platform-specific close logic should be triggered from JS
        Console.WriteLine("Trigger close app logic");
    }
}
