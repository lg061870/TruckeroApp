@using Microsoft.AspNetCore.Components
@using Truckero.Core.Interfaces.Services
@using TruckeroApp.Interfaces
@inject IAuthService AuthService
@inject ITokenStorageService TokenStorage
@inject NavigationManager NavManager

<div class="fixed inset-0 z-50 flex items-end justify-center bg-black bg-opacity-50">
    <div class="w-full sm:max-w-md bg-white rounded-t-2xl p-6 shadow-lg animate-slide-up">
        <div class="text-center">
            <i class="fa-solid fa-user-xmark text-4xl text-red-500 mb-3"></i>
            <h3 class="text-lg font-semibold text-gray-800 mb-2">Confirm Account Deletion</h3>
            <p class="text-sm text-gray-600 mb-4">
                Please re-enter your credentials to delete your account.
            </p>

            <div class="space-y-3">
                <input class="w-full px-3 py-2 border rounded" placeholder="Email" @bind="Email" />
                <input class="w-full px-3 py-2 border rounded" placeholder="Password" type="password" @bind="Password" />

                <button class="w-full px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700"
                        @onclick="DeleteAccount"
                        disabled="@IsProcessing">
                    @if (IsProcessing)
                    {
                        <span>Deleting...</span>
                    }
                    else
                    {
                        <span>Delete Account</span>
                    }
                </button>

                <button class="w-full px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200"
                        @onclick="OnDismiss">
                    Cancel
                </button>
            </div>

            @if (!string.IsNullOrWhiteSpace(StatusMessage))
            {
                <div class="text-sm mt-2 @(IsSuccess ? "text-green-600" : "text-red-600")">
                    @StatusMessage
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public EventCallback OnDismiss { get; set; }

    private string Email { get; set; } = string.Empty;
    private string Password { get; set; } = string.Empty;
    private bool IsProcessing { get; set; } = false;
    private string? StatusMessage;
    private bool IsSuccess = false;

    private async Task DeleteAccount()
    {
        IsProcessing = true;
        StatusMessage = null;
        try
        {
            var result = await AuthService.LoginToDeleteAccountAsync(Email, Password);
            if (result.Success)
            {
                StatusMessage = result.ErrorMessage;
                IsSuccess = true;
                await TokenStorage.ClearAllAsync();
                NavManager.NavigateTo("/roleswitcher", true);
            }
            else
            {
                StatusMessage = result.ErrorMessage ?? "Failed to delete account.";
                IsSuccess = false;
            }
        }
        catch (Exception ex)
        {
            StatusMessage = $"Error: {ex.Message}";
            IsSuccess = false;
        }
        finally
        {
            IsProcessing = false;
        }
    }
}
